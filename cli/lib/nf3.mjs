import axios from 'axios';
import Web3 from 'web3';
import { generateKeys } from '../../nightfall-client/src/services/keys.mjs';

/**
@class
Creates a new Nightfall_3 library instance.
@param {string} clientBaseUrl - The base url for nightfall-client
@param {string} optimistBaseUrl - The base url for nightfall-optimist
@param {string} optimistWsUrl - The webscocket url for nightfall-optimist
@param {string} web3WsUrl - The websocket url for the web3js client
@param {string} ethereumSigningKey - the Ethereum siging key to be used for transactions (hex string).
@param {object} zkpKeys - An object containing the zkp keys to use.  These will be auto-generated if left undefined.
*/
class Nf3 {
  /**
  @property {string} clientBaseUrl - The base url for Nightfall Client
  @property {string} optimistBaseUrl -
  */

  clientBaseUrl;

  optimistBaseUrl;

  optimistWsUrl;

  web3WsUrl;

  web3;

  shieldAddress;

  ethereumSigningKey;

  zkpKeys;

  defaultFee = 10;

  constructor(
    clientBaseUrl,
    optimistBaseUrl,
    optimistWsUrl,
    web3WsUrl,
    ethereumSigningKey,
    zkpKeys,
  ) {
    this.clientBaseUrl = clientBaseUrl;
    this.optimistBaseUrl = optimistBaseUrl;
    this.optimistWsUrl = optimistWsUrl;
    this.web3WsUrl = web3WsUrl;
    this.ethereumSigningKey = ethereumSigningKey;
    this.zkpKeys = zkpKeys;
  }

  async init() {
    this.web3 = new Web3(this.web3WsUrl);
    this.zkpKeys = this.zkpKeys || (await generateKeys());
    this.shieldAddress = await this.getContractAddress('Shield');
    return this.subscribeToIncomingViewingKeys();
  }

  /**
  @method
  Setter for the ethereum private key, in case it wasn't known at build time.
  @param {string} key - the ethereum private key as a hex string.
  */
  setEthereumSigningKey(key) {
    this.ethereumSigningKey = key;
  }

  /**
  @method
  Setter for the zkp keys, in case it wasn't known at build time and we don't
  want to use autogenerated ones.
  @param {object} keys - The zkp keys object.
  */
  setzkpKeys(keys) {
    this.zkpKeys = keys;
  }

  /**
  @async @method
  A convenience function for signing and submitting an Ethereum transaction to the
  blockchain.
  @param {object} web3 - An instance of the Web3js library object.
  @param {object} unsignedTransaction - An unisigned web3js transaction object.
  @param {string} privateKey - The ethereum signing key (as a hex string)
  @param {string} shieldAddress - The address of the Nightfall_3 shield address.
  This can be found using the getContractAddress convenience function.
  @returns {Promise} This will resolve into a transaction receipt.
  */
  async submitTransaction(unsignedTransaction, fee = this.defaultFee) {
    const accountAddress = this.web3.eth.accounts.privateKeyToAccount(this.ethereumSigningKey);
    const nonce = await this.web3.eth.getTransactionCount(accountAddress.address);
    const tx = {
      to: this.shieldAddress,
      data: unsignedTransaction,
      value: fee,
      gas: 10000000,
      gasPrice: 10000000000,
      nonce,
    };
    const signed = await this.web3.eth.accounts.signTransaction(tx, this.ethereumSigningKey);
    return this.web3.eth.sendSignedTransaction(signed.rawTransaction);
  }

  /**
  @async @method
  Function to determine if a Nightfall_3 server is running and healthy.
  @param {string} server - The name of the server being checked ['client', 'optimist', 'timber']
  @returns {Promise} This will resolve into a boolean - true if the healthcheck passed.
  */
  async healthcheck(server) {
    let url;
    switch (server) {
      case 'client':
        url = this.clientBaseUrl;
        break;
      case 'optimist':
        url = this.optimistBaseUrl;
        break;
      default:
        throw new Error('Unknown server name');
    }
    let res;
    try {
      res = await axios.get(`${url}/healthcheck`);
      if (res.status !== 200) return false;
    } catch (err) {
      return false;
    }
    return true;
  }

  /**
  @async @method
  Helper function to return the address of a Nightfall_3 contract.
  @param {string} contractName - the name of the smart contract in question. Possible
  values are 'Shield', 'State', 'Proposers', 'Challengers'.
  @returns {Promise} Resolves into the Ethereum address of the contract
  */
  async getContractAddress(contractName) {
    const res = await axios.get(`${this.clientBaseUrl}/contract-address/${contractName}`);
    return res.data.address;
  }

  /**
  @async @method
  Function to deposit a Layer 1 token into Layer 2, so that it can be transacted
  privately. It requires the clientSetup function to have been run.
  @param {number} fee - The amount (Wei) to pay a proposer for the transaction
  @param {string} ercAddress - The address of the ERCx contract from which the token
  is being taken.  Note that the Nightfall_3 State.sol contract must be approved
  by the token's owner to be able to withdraw the token.
  @param {string} tokenType - The type of token to deposit. Possible values are
  'ERC20', 'ERC721', 'ERC1155'.
  @param {number} value - The value of the token, in the case of an ERC20 or ERC1155
  token.  For ERC721 this should be set to zero.
  @param {string} tokenId - The ID of an ERC721 or ERC1155 token.  In the case of
  an 'ERC20' coin, this should be set to '0x00'.
  @param {object} keys - The ZKP private key set.
  @returns {Promise} Resolves into the Ethereum unsigned Ethereum transaction to effect this deposit.
  */
  async deposit(ercAddress, tokenType, value, tokenId, fee = this.defaultFee) {
    const res = await axios.post(`${this.clientBaseUrl}/deposit`, {
      ercAddress,
      tokenId,
      tokenType,
      value,
      pkd: this.zkpKeys.pkd,
      nsk: this.zkpKeys.nsk,
      fee,
    });
    return res.data.txDataToSign;
  }

  /**
  @async @method
  Function to transfer a token within Layer 2.
  @param {number} fee - The amount (Wei) to pay a proposer for the transaction
  @param {string} ercAddress - The address of the ERCx contract from which the token
  is being taken.  Note that the Nightfall_3 State.sol contract must be approved
  by the token's owner to be able to withdraw the token.
  @param {string} tokenType - The type of token to deposit. Possible values are
  'ERC20', 'ERC721', 'ERC1155'.
  @param {number} value - The value of the token, in the case of an ERC20 or ERC1155
  token.  For ERC721 this should be set to zero.
  @param {string} tokenId - The ID of an ERC721 or ERC1155 token.  In the case of
  an 'ERC20' coin, this should be set to '0x00'.
  @param {object} keys - The ZKP private key set of the sender.
  @param {array} pkd - The transmission key of the recipient (this is a curve point
  represented as an array of two hex strings).
  @returns {Promise} Resolves into the Ethereum unsigned Ethereum transaction to effect this transfer.
  */
  async transfer(ercAddress, tokenType, value, tokenId, pkd, fee = this.defaultFee) {
    const res = await axios.post(`${this.clientBaseUrl}/transfer`, {
      ercAddress,
      tokenId,
      recipientData: {
        values: [value],
        recipientPkds: [pkd],
      },
      nsk: this.zkpKeys.nsk,
      ask: this.zkpKeys.ask,
      fee,
    });
    return res.data.txDataToSign;
  }

  /**
  @async @method
  Function to withdraw a token from Layer 2 back to Layer 1.
  @param {number} fee - The amount (Wei) to pay a proposer for the transaction
  @param {string} ercAddress - The address of the ERCx contract from which the token
  is being taken.  Note that the Nightfall_3 State.sol contract must be approved
  by the token's owner to be able to withdraw the token.
  @param {string} tokenType - The type of token to deposit. Possible values are
  'ERC20', 'ERC721', 'ERC1155'.
  @param {number} value - The value of the token, in the case of an ERC20 or ERC1155
  token.  For ERC721 this should be set to zero.
  @param {string} tokenId - The ID of an ERC721 or ERC1155 token.  In the case of
  an 'ERC20' coin, this should be set to '0x00'.
  @param {object} keys - The ZKP private key set of the sender.
  @param {string} recipientAddress - The Ethereum address to where the withdrawn tokens
  should be deposited.
  @returns {Promise} Resolves into the  Ethereum unsigned Ethereum transaction to effect this transfer.
  */
  async withdraw(ercAddress, tokenType, value, tokenId, recipientAddress, fee = this.defaultFee) {
    const res = await axios.post(`${this.clientBaseUrl}/withdraw`, {
      ercAddress,
      tokenId,
      tokenType,
      value,
      recipientAddress,
      nsk: this.zkpKeys.nsk,
      ask: this.zkpKeys.ask,
      fee,
    });
    return res.data.txDataToSign;
  }

  /**
  @async @method
  This function provides nightfall-client with a set of viewing keys.  Without these,
  it won't listen for BlockProposed events and so won't update its transaction collection
  with information about which are on-line.
  @param {object} keys - Object containing the ZKP key set (this may be generated
  with the makeKeys function).
  */
  async subscribeToIncomingViewingKeys() {
    return axios.post(`${this.clientBaseUrl}/incoming-viewing-key`, {
      ivk: this.zkpKeys.ivk,
      nsk: this.zkpKeys.nsk,
    });
  }

  /**
  @async @method
  This function closes the Nf3 connection to the blockchain
  */
  close() {
    this.web3.currentProvider.connection.close();
  }
}

export default Nf3;
