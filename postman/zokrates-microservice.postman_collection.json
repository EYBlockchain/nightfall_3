{
  "info": {
    "_postman_id": "4a0421d3-e2e1-44b6-aaca-dc4bb6828529",
    "name": "zokrates-microservice Copy",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "healthcheck",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "0ecb5b1a-a988-4835-908b-5f30d09c7b46",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "name": "Content-Type",
            "type": "text",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": ""
        },
        "url": {
          "raw": "localhost:8080/healthcheck",
          "host": ["localhost"],
          "port": "8080",
          "path": ["healthcheck"]
        }
      },
      "response": []
    },
    {
      "name": "loadCircuits",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "152bf063-af25-492b-bfc9-360a61402e8f",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "var res = JSON.parse(responseBody);",
              "",
              "pm.test('should return a valid acknowledgement', () => {",
              "    pm.expect(res.status).to.equal(true);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "formdata",
          "formdata": [
            {
              "key": "circuits",
              "type": "file",
              "src": "/Users/a2021282/Documents/zokrates-zexe-microservice/circuits/examples/0xfa1f368f31334dce92b28341a8de3d9b.tar"
            }
          ]
        },
        "url": {
          "raw": "localhost:8080/load-circuits",
          "host": ["localhost"],
          "port": "8080",
          "path": ["load-circuits"]
        }
      },
      "response": []
    },
    {
      "name": "loadCircuit",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "10cec5ff-ba2c-405d-a004-5da77ead5e7f",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "var res = JSON.parse(responseBody);",
              "",
              "pm.test('should return a valid acknowledgement', () => {",
              "    pm.expect(res.status).to.equal(true);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "name": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "formdata",
          "formdata": [
            {
              "key": "circuit",
              "type": "file",
              "src": "/Users/a2021282/Documents/zokrates-zexe-microservice/circuits/examples/factor.zok"
            }
          ]
        },
        "url": {
          "raw": "localhost:8080/load-circuit",
          "host": ["localhost"],
          "port": "8080",
          "path": ["load-circuit"]
        },
        "description": "Allows uploading of a circuit (.zok) file"
      },
      "response": []
    },
    {
      "name": "generateKeys",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "a3327782-ad73-464c-9e5f-c273a9ced7d7",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "var res = JSON.parse(responseBody);",
              "",
              "pm.test('should return a valid vk', () => {",
              "    pm.expect(res.vk).to.exist;",
              "    pm.expect(res.vk.h).to.exist;",
              "    pm.expect(res.vk.g_alpha).to.exist;",
              "    pm.expect(res.vk.h_beta).to.exist;",
              "    pm.expect(res.vk.g_gamma).to.exist;",
              "    pm.expect(res.vk.h_gamma).to.exist;",
              "    pm.expect(res.vk.query).to.exist;",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "name": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"filepath\": \"0xfa1f368f31334dce92b28341a8de3d9b/factor.zok\",\n    \"curve\": \"bls12_377\",\n    \"provingScheme\": \"gm17\",\n    \"backend\": \"zexe\"\n}\n\n"
        },
        "url": {
          "raw": "localhost:8080/generate-keys",
          "host": ["localhost"],
          "port": "8080",
          "path": ["generate-keys"]
        }
      },
      "response": []
    },
    {
      "name": "vk",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "7fe9c0ec-12d2-4306-bc78-fa72a615f594",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "var res = JSON.parse(responseBody);",
              "",
              "pm.test('should return a valid vk', () => {",
              "    pm.expect(res.vk).to.exist;",
              "    pm.expect(res.vk.h).to.exist;",
              "    pm.expect(res.vk.g_alpha).to.exist;",
              "    pm.expect(res.vk.h_beta).to.exist;",
              "    pm.expect(res.vk.g_gamma).to.exist;",
              "    pm.expect(res.vk.h_gamma).to.exist;",
              "    pm.expect(res.vk.query).to.exist;",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "name": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{ \n\t\"folderpath\": \"0xfa1f368f31334dce92b28341a8de3d9b/factor\"\n}"
        },
        "url": {
          "raw": "localhost:8080/vk",
          "host": ["localhost"],
          "port": "8080",
          "path": ["vk"]
        }
      },
      "response": []
    },
    {
      "name": "generateProof",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "207cbec1-968a-4146-8aaa-9c309033ea43",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "var res = JSON.parse(responseBody);",
              "",
              "pm.test('should return a valid proof', () => {",
              "    pm.expect(res.proof).to.exist;",
              "    pm.expect(res.proof.a).to.exist;",
              "    pm.expect(res.proof.b).to.exist;",
              "    pm.expect(res.proof.c).to.exist;",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "name": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{ \n\t\"folderpath\": \"0xfa1f368f31334dce92b28341a8de3d9b/factor\",\n\t\"inputs\": [6, 3, 2],\n\t\"provingScheme\": \"gm17\",\n\t\"backend\": \"zexe\"\n}"
        },
        "url": {
          "raw": "localhost:8080/generate-proof",
          "host": ["localhost"],
          "port": "8080",
          "path": ["generate-proof"]
        }
      },
      "response": []
    }
  ],
  "protocolProfileBehavior": {}
}
