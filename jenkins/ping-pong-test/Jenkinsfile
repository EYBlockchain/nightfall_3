
env.JENKINS_PING_PONG_DIR = "jenkins/ping-pong-test"
def currentUser = env.BUILD_USER
def environmentToDeploy = ''

lock(resource: 'nightfall-ping-pong-test', inversePrecedence: true) {
    try {
        node {          
            stage("Build Application") {
                // Waits for 5 min before keep going
                timeout(time: 5, unit: "MINUTES") {
                    def options = ["local", "internal", "staging", "preprod"]
                    environmentToDeploy = input message: 'Which environment should be used to deploy?', parameters: [choice(choices: options, name: "Choose one option")]
                }

                echo "Environment choosen: $environmentToDeploy\n"
                echo "Building Nightfall\n"
                
                env.WORKSPACE = execute("pwd")
                echo "Workspace: ${env.WORKSPACE}"

                deleteDir()
                checkout scm
                buildNightfall()
            }

            stage("Deploy Application") {
                if(environmentToDeploy == 'local') {
                    deployLocal()
                } else {
                    // TODO which Blockchain we will use for AWS envs?
                    checkout '' // TODO checks out nf3_private, since we need VPN and deployment stuff
                    deployAws(environmentToDeploy)
                }
            }

            parallel {
                stage('Start Ganache') {
                    sh "WORKSPACE=${WORKSPACE} make -C ${JENKINS_PING_PONG_DIR} start-ganache-local"

                    //if(environmentToDeploy == 'local') {
                        //startGanache()
                    //} else {
                        // TODO which Blockchain we will use for AWS envs?
                  //      checkout '' // TODO checks out nf3_private, since we need VPN and deployment stuff
                    //    startAws(environmentToDeploy)
                    //}
                }

                stage('Start Nightfall') {
                    sh "sleep(20); WORKSPACE=${WORKSPACE} make -C ${JENKINS_PING_PONG_DIR} start-nightfall-local"
                    
                    //if(environmentToDeploy == 'local') {
                       // startNightfallLocal()
                    //} else {
                        // TODO which Blockchain we will use for AWS envs?
                        //checkout '' // TODO checks out nf3_private, since we need VPN and deployment stuff
                        //startAws(environmentToDeploy)
                    //}
                }
/*
                stage('Run the Ping-pong test') {
                    if(environmentToDeploy == 'local') {
                        runPingPongTestOnLocal()
                    } else {
                        runPingPongTestOnAws(environmentToDeploy)
                    }
                }

                stage('Clean') {
                    cleanUpEnvironment(environmentToDeploy)
                }
            }
            */
        }
    } catch (e) {
        cleanUpEnvironment(environmentToDeploy);
    }
}

// #### Utilitary functions
def cleanUpEnvironment(environmentToDeploy) {
    if(environmentToDeploy == null) return

    while(env.TEST_FINISHED != 'true')
        sleep(60)

    println "Cleaning up environment"

    if(environmentToDeploy == 'local') {
        sh "WORKSPACE=${WORKSPACE} make -C ${JENKINS_PING_PONG_DIR} clean-local"
    } else {
        sh 'make clean-aws'
    }
}

def runPingPongTestOnLocal() {
    sh "WORKSPACE=${WORKSPACE} make -C ${JENKINS_PING_PONG_DIR} run-ping-pong-local"
    env.TEST_FINISHED = 'true'
}

def runPingPongTestOnAws(environmentToDeploy) {
    // TODO
}

def deployLocal() {
    sh "WORKSPACE=${WORKSPACE} make -C ${JENKINS_PING_PONG_DIR} build-ping-pong-local"
}

def startNightfallLocal() {
    println "Waiting Ganache to be up!"
    // Waits for Ganache to be fully up
    sleep(20)

    println "Ok, lets go to start Nightfall"

    sh "WORKSPACE=${WORKSPACE} make -C ${JENKINS_PING_PONG_DIR} start-nightfall-local"
}

def startGanache() {
    sh "WORKSPACE=${WORKSPACE} make -C ${JENKINS_PING_PONG_DIR} start-ganache-local"
}

// Try to reuse for AWS
def waitNightfallFinishingInitialization() {
    print("Waiting Nightfall initialization")
    while(true) {
        def result = execute('docker wait ping-pong_deployer_1')
        if(result == '0') break
        
        sleep(20)
    }
    println("Nightfall initialization is done!")
}

/**
 * Deploys the app on the specified environment on AWS 
 */
def deployAndStartAws(environmentToDeploy) {
    // TODO
}

def buildNightfall() {
    sh "WORKSPACE=${WORKSPACE} make -C ${JENKINS_PING_PONG_DIR} build"
}

def execute(String command) {
    sh(script: command, returnStdout: true).trim()
}

def sendSlackNotification() {
    // TODO create Slack channel 
}