
def currentUser = env.BUILD_USER
def environmentToDeploy = ''

lock(resource: 'nightfall-ping-pong-test', inversePrecedence: true) {
    try {
        node {          
            stage("Build Application") {
                // Waits for 5 min before keep going
                timeout(time: 5, unit: "MINUTES") {
                    def options = ["local", "internal", "staging", "preprod"]
                    environmentToDeploy = input message: 'Which environment should be used to deploy?', parameters: [choice(choices: options, name: "Choose one option")]
                }

                println "Environment choosen: $environmentToDeploy"
                
                env.WORKSPACE = execute("pwd")

                def makefileDir = "aws"
                if(environmentToDeploy == 'local') {
                    makefileDir = "local"
                }
                
                env.JENKINS_PING_PONG_MAKE_DIR = "jenkins/ping-pong-test/${makefileDir}"

                println "Building Nightfall"

                deleteDir()
                checkout scm
                buildNightfall()
            }

            if(environmentToDeploy == 'local') {
                stage("Deploy Application") {
                    deployLocal()
                }

                parallel (
                    'Start Ganache': {
                        startGanacheLocal()
                    },
                    'Start Nightfall': {
                        startNightfallLocal()
                    },
                    'Run the Ping-pong test': {
                        waitNightfallFinishingInitialization()
                        runPingPongTestOnLocal()
                    },
                    'Clean': {
                        cleanUpEnvironment(environmentToDeploy)
                    }
                )

            } else { // aws pipeline
                stage("Deploy Application") {
                    // TODO which Blockchain we will use for AWS envs?
                    checkout '' // TODO checks out nf3_private, since we need VPN and deployment stuff
                    deployAws(environmentToDeploy)
                }
            }
        }
    } catch (e) {
        cleanUpEnvironment(environmentToDeploy);
    }
}

// #### Utilitary functions
def execute(String command) {
    sh(script: command, returnStdout: true).trim()
}

def sendSlackNotification() {
    // TODO create Slack channel 
}

def buildNightfall() {
    sh "WORKSPACE=${WORKSPACE} make -C ${JENKINS_PING_PONG_MAKE_DIR} build"
}

def cleanUpEnvironment(environmentToDeploy) {
    while(env.PING_PONG_TEST_FINISHED != 'true')
        sleep(60)

    println "Cleaning up environment"

    sh "WORKSPACE=${WORKSPACE} make -C ${JENKINS_PING_PONG_MAKE_DIR} clean"
}

def runPingPongTestOnLocal() {
    sh "WORKSPACE=${WORKSPACE} make -C ${JENKINS_PING_PONG_MAKE_DIR} run-ping-pong"
    env.PING_PONG_TEST_FINISHED = 'true'
}

def deployLocal() {
    sh "WORKSPACE=${WORKSPACE} make -C ${JENKINS_PING_PONG_MAKE_DIR} build-ping-pong"
}

def startNightfallLocal() {
    println "Waiting Ganache to be up!"
    // Waits for Ganache to be fully up
    sleep(10)

    println "Ok, lets go to start Nightfall"

    sh "WORKSPACE=${WORKSPACE} make -C ${JENKINS_PING_PONG_MAKE_DIR} start-nightfall"
}

def startGanacheLocal() {
    sh "WORKSPACE=${WORKSPACE} make -C ${JENKINS_PING_PONG_MAKE_DIR} start-ganache"
}

// Try to reuse for AWS
def waitNightfallFinishingInitialization() {
    sleep(80)

    print("Waiting Nightfall initialization")
    while(true) {
        def result = execute('docker wait ping-pong_deployer_1')
        if(result == '0') break
        
        sleep(20)
        print "."
    }

    println("Nightfall initialization is done!")
}

/**
 * Deploys the app on the specified environment on AWS 
 */
def deployAndStartAws(environmentToDeploy) {
    // TODO
}

def runPingPongTestOnAws(environmentToDeploy) {
    // TODO
}
