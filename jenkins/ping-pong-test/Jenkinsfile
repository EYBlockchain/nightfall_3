
env.JENKINS_PING_PONG_DIR = "jenkins/ping-pong-test"
//env.WORKSPACE = execute("pwd")
def currentUser = env.BUILD_USER
def environmentToDeploy = ''

lock(resource: 'nightfall-ping-pong-test', inversePrecedence: true) {
    try {
        node {          
            stage("Build Application") {
                // Waits for 5 min before keep going
                timeout(time: 5, unit: "MINUTES") {
                    def options = ["local", "internal", "staging", "preprod"]
                    environmentToDeploy = input message: 'Which environment should be used to deploy?', parameters: [choice(choices: options, name: "Choose one option")]
                }

                echo "Environment choosen: $environmentToDeploy\n"
                echo "Building Nightfall\n"
                //echo "Workspace: ${env.WORKSPACE}"

                deleteDir()
                checkout scm
                buildNightfall()
            }

            stage('Deploying and Starting Application') {
                if(environmentToDeploy == 'local') {
                    deployAndStartLocal()
                } else {
                    // TODO which Blockchain we will use for AWS envs?
                    checkout '' // TODO checks out nf3_private, since we need VPN and deployment stuff
                    deployAndStartAws(environmentToDeploy)
                }
            }

            stage('Running the Ping-pong test') {
                if(environmentToDeploy == 'local') {
                    runPingPongTestOnLocal()
                } else {
                    runPingPongTestOnAws(environmentToDeploy)
                }
            }

            stage('Clean') {
                cleanUpEnvironment(environmentToDeploy)
            }
        }
    } catch (e) {
        cleanUpEnvironment(environmentToDeploy);
    }
}

// #### Utilitary functions
def cleanUpEnvironment(environmentToDeploy) {
    if(environmentToDeploy == null) return

    if(environmentToDeploy == 'local') {
        sh "WORKSPACE=${env.WORKSPACE} make -C ${env.JENKINS_PING_PONG_DIR} clean-local"
    } else {
        sh 'make clean-aws'
    }
}

def runPingPongTestOnLocal() {
    sh "WORKSPACE=${env.WORKSPACE} make -C ${env.JENKINS_PING_PONG_DIR} run-ping-pong-local"
}

def runPingPongTestOnAws(environmentToDeploy) {
    // TODO
}

def deployAndStartLocal() {
    sh "WORKSPACE=${env.WORKSPACE} make -C ${env.JENKINS_PING_PONG_DIR} build-ping-pong-local"
    
    startGanache()
    startNightfallLocal()
}

def startNightfallLocal() {
    sh 'start-nightfall-local'
    waitNightfallFinishingInitialization()
}

def startGanache() {
    sh 'start-ganache-local'

    // Waits for Ganache to be fully up
    sleep(30) { // Sleeps for 30s
        println("Deployment process interruped!")
        // currentBuild.result = 'FAILED' // De we need this?
    }
}

// Try to reuse for AWS
def waitNightfallFinishingInitialization() {
    print("Waiting Nightfall initialization")
    while(true) {
        def result = execute('docker wait ping-pong_deployer_1')
        if(result == '0') {
            break
        }
        print(".")
        sleep(20)
    }
    println("Nightfall initialization is done!")
}

/**
 * Deploys the app on the specified environment on AWS 
 */
def deployAndStartAws(environmentToDeploy) {
    // TODO
}

def buildNightfall() {
    sh "WORKSPACE=${env.WORKSPACE} make -C ${JENKINS_PING_PONG_DIR} build"
}

def execute(String command) {
    sh(script: command, returnStdout: true).trim()
}

def sendSlackNotification() {
    // TODO create Slack channel 
}