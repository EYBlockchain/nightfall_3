// ABOUT

// Function for verifying a Merkle witness (a.k.a. siblingPath).
// Verifies membership of a leaf in a Merkle Tree of height h = 52.
//
//            level h:             root
//                              /       \
//                                 ...
//              ...
//                       /    \    ...   /   \
//            level 1:
//                     /  \  /  \  ... /  \  /  \
//  leaves at level 0:


// IMPORTS

from "utils/pack_bls12_377/bool/unpack128.zok" import main as unpack128

from "../../../../hashes/mimc/bls12-377/mimc2.zok" import main as mimc2 // can swap with other hash function
from "../../../../concatenate/order-left-right-1x1.zok" import main as orderLeftRight


// MAIN

// @param {field[height]} siblingPath - the values of the sibling nodes of the path from the leaf to the root
// @param {field} leafValue - the value of the leaf. We aim to prove this leaf is in the tree.
// @param {field} leafIndex - the index of the leaf within the leaves (indexing starts from zero). Note: the binary decomposition of a leaf's index gives us the 'left-rightness' of that leaf's path up the Merkle Tree.
// @returns {field} root - the root of the merkle tree

def main(private field[52] siblingPath, private field leafValue, private field leafIndex) -> (field):

    // Hash up the Merkle Tree to the root:

    bool[128] leafIndexBits = unpack128(leafIndex)
    field nodeValue = leafValue
    field[2] preimage = [0, 0]

    for field i in 0..52 do
        field j = 51 - i // iterator for the siblingPath
        field k = 127 - i // iterator for the leafIndexBits
        preimage = orderLeftRight(leafIndexBits[k], nodeValue, siblingPath[j])
        nodeValue = mimc2(preimage)
    endfor

    field root = nodeValue

    return root
