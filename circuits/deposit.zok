from "utils/pack/bool/nonStrictUnpack256.zok" import main as field_to_bool_256
from "utils/casts/u32_8_to_bool_256.zok" import main as u32_8_to_bool_256

from "./common/hashes/sha256/pad768ThenHash.zok" import main as sha256of768
from "./common/hashes/sha256/pad1024ThenHash.zok" import main as sha256of1024

// Inputs for main:
// - ercContractAddress (public) is the ERCx contract address
// - value (public) is the 256 bit value (fungible) or identifier (non-fungible)
// - publicKey (private) is the public key of the newCommitment derived by hashing the Secret Key Sk of the newCommitment. IT IS KEPT PRIVATE!!
// - salt (private) is the salt for the newCommitment
// - newCommitment (public) is the newCommitment

def main(\
	u32[8] publicInputsHash,\
	private u32[8] ercContractAddress,\
 	u32[8] value,\
	private u32[8] publicKey,\
	private u32[8] salt,\
	u32[8] newCommitment\
)->():

	// validate the new commitment:
	assert(newCommitment == sha256of1024([\
		...ercContractAddress,\
		...value,\
		...publicKey,\
		...salt\
	]))

	// Check that the 'public inputs' hash to the publicInputHash:
	assert(publicInputsHash == sha256of768([\
			...ercContractAddress,\
			...value,\
			...newCommitment\
	]))

	return
