# ================================================================================
# [Shared Settings]

# Services to be started during the deployment
# Leaving it blank will default to 'deployer, worker'
# Options are: administrator, client, deployer, optimist, worker
export DEPLOYMENT_SERVICES=

# The network name defined for this deployment
# Information related to this network is present in config/default.js. See the README.md for additional details
# Required!
export ETH_NETWORK=localhost

# The Ethereum address to be used during the deployment
# Required!
export ETH_ADDRESS=0x9C8B2276D490141Ae1440Da660E470E7C0349C63

# The private key related to the Ethereum address set in ETH_ADDRESS
# Required!
export ETH_PRIVATE_KEY=4775af73d6dc84a0ae76f8726bda4b9ecf187c377229cb39e1afa7a18236a69e

# The blockchain the services will connect to
# Required!
#export BLOCKCHAIN_URL=ws://$PERF_TEST_LOAD_BALANCER_BLOCKCHAIN:8546

# Sets the default gas value and price
# Leaving it blank will fallback to the defined defaults
export GAS=
export GAS_PRICE=

# Text free variable indicating the environment name
export ENVIRONMENT=perfTest

# Log level
export LOG_LEVEL=debug

# If the logging of HTTP payload is enabled
export LOG_HTTP_PAYLOAD_ENABLED=true

# If the HTTP full data payload should be logged
export LOG_HTTP_FULL_DATA=false

# Number of times the app will try to get the contracts info before giving up
export AUTOSTART_RETRIES=1000000

# Used by the client & deployer services - defines the 'worker' host. 
# Leave it blank to get the one started in the docker-compose
export CIRCOM_WORKER_HOST=

# Used by the client & optimist services
# Set to 'true' so that client will not wait for the blockchain to initialize
export USE_EXTERNAL_NODE=


# ================================================================================
# [Deployer]

# The L2 Token ID that was defined in the settings ('config/default.js') to be used to pay the fees. See nightfall-deployer/README.md.
# Required!
FEE_L2_TOKEN_ID=MATIC

# When submitting a transaction, Nightfall verifies if the sender address is sanctioned on Chainalysis sanctions screening oracle
# If set to 'true', a mocked sanctions contract will be deployed, otherwise the Chainalysis sanctions oracle will be used instead.
# Required!
export DEPLOY_MOCKED_SANCTIONS_CONTRACT=true

# It is enabled by default. Set to 'disable' to disable the whitelisting process. See docs/whitelist.md
export WHITELISTING=disable

# The number of Approvers required to authorise `onlyOwner` transactions. See nightfall-administrator/README.md.
# Required!
export MULTISIG_SIGNATURE_THRESHOLD=1

# A comma separated Ethereum addresses list of the approvers
# Leave it blank if no approvers are needed
export MULTISIG_APPROVERS=

# If the Trusted Setup should always run during the deployment
export ALWAYS_DO_TRUSTED_SETUP=

# If for some reason the contracts deployment went well, but the cirtuits didn't finish well, set to 'true' to skip the contracts' deployment
export SKIP_DEPLOYMENT=

# If the deployment to run will upgrade contracts 
export UPGRADE_CONTRACTS=

# When set to anything different of 'false', deploys the Smart Contract mocks, and funds some contracts and users (for Testing)
# Defaults to 'true' if left blank
export DEPLOY_MOCK_TOKENS=
