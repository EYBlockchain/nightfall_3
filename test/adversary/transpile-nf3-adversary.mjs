import fs from 'fs';
import { copyDir } from './adversary-code/utils.mjs';

const transpileLibNf3Sdk = _pathToSrc => {
  let srcFile = fs.readFileSync(_pathToSrc, 'utf-8');
  srcFile = `/* THIS FILE CONTAINS CODE THAT HAS BEEN AUTOGENERATED DO NOT MODIFY MANUALLY */\n${srcFile}`;

  // Modify makeBlockNow function so that we can pass badBlockType as a parameter
  const regexMakeBlock =
    /async startMakeBlock\(\) {\n(\s)*return axios.get\(`\${this.optimistBaseUrl}\/block\/make-now`\);\n(\s)*}/g;
  const reMakeBlock = `async makeBlockNow(badBlockType) {
    return axios.get(\`\${this.optimistBaseUrl}/block/make-now/\${badBlockType}\`);
  }`;
  srcFile = srcFile.replace(regexMakeBlock, reMakeBlock);

  // For each circuit, add transactionType as an input parameter so that we can specify bad transaction types
  for (const circuit of ['deposit', 'transfer', 'withdraw', 'tokenise', 'burn']) {
    const regexTransactionTypeParam = new RegExp(`async ${circuit}\\(`, 'g');
    const reTransactionTypeParam = `async ${circuit}(
    transactionType,`;
    srcFile = srcFile.replace(regexTransactionTypeParam, reTransactionTypeParam);

    const regexTransactionTypeParamCall = new RegExp(`/${circuit}\`, {`, 'g');
    const reTransactionTypeParamCall = `/${circuit}\`, {
      transactionType,`;
    srcFile = srcFile.replace(regexTransactionTypeParamCall, reTransactionTypeParamCall);
  }

  fs.writeFileSync(_pathToSrc, srcFile);
};

copyDir('./cli/', './test/adversary/adversary-cli/').then(() => {
  console.log('done with cli copy');

  transpileLibNf3Sdk('./test/adversary/adversary-cli/lib/nf3.mjs');

  console.log(`transpile adversary cli done`);
});
