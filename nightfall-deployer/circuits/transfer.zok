
from "./common/utils/structures.zok" import Point, PublicTransaction, Nullifiers, Commitments, Transfer, SHIFT;
from "./common/utils/calculations.zok" import sum;
from "./common/utils/calculateKeys.zok" import main as calculateKeys, Keys;
from "./common/casts/u32_array_to_field.zok" import main as u32_array_to_field;
from "./common/casts/u8_array_to_field.zok" import main as u8_array_to_field;
from "./common/generic_circuit/Verifiers/verify_structure.zok" import main as verify_structure;
from "./common/generic_circuit/Verifiers/verify_encryption.zok" import main as verify_encryption;
from "./common/generic_circuit/Verifiers/verify_nullifiers.zok" import main as verify_nullifiers;
from "./common/generic_circuit/Verifiers/verify_commitments.zok" import main as verify_commitments;

def main(\
    PublicTransaction tx,\
    field[4] roots,\
    field maticAddress,\
    private field rootKey,\
    private Nullifiers<4> nullifiers,\
    private Commitments<3> commitments,\
    private Transfer transfer\
) {
    

    //Verify public transaction structure
    assert(verify_structure::<1>(\
        tx.value,\
        tx.fee,\
	    tx.transactionType,\
	    tx.tokenType,\
	    tx.tokenId,\
	    tx.ercAddress,\
	    tx.recipientAddress,\
	    tx.commitments,\
	    tx.nullifiers,\
	    tx.historicRootBlockNumberL2,\
	    tx.compressedSecrets\
    ));

    field[4] nullifiersValue = u8_array_to_field(nullifiers.oldCommitments.value);
    field[3] commitmentsValue = u8_array_to_field(commitments.newCommitments.value);

    //Check that values match
    assert(sum(nullifiersValue) == sum(commitmentsValue) + tx.fee); 
   
    // pack the top four bytes of the token id into the ercAddress field (address only
	// uses 160 bits and the Shield contract prevents creation of something with more than 160 bits)
    field idRemainder = u32_array_to_field(transfer.idTransfer[1..8]); 
    field packedErcAddress = transfer.ercAddressTransfer + u32_array_to_field([transfer.idTransfer[0]]) * SHIFT; 

    //Calculate Keys
    Keys keys = calculateKeys(rootKey);

    //Verify nullifiers
    assert(verify_nullifiers::<1,4>(packedErcAddress, idRemainder,\
        tx.nullifiers, roots, nullifiersValue, nullifiers.oldCommitments.salt,\
        nullifiers.paths, nullifiers.orders, keys.nullifierKey, keys.zkpPublicKey, maticAddress));

    //Verify new Commmitments
    assert(verify_commitments::<1,3>(packedErcAddress, idRemainder, tx.commitments,\
    commitmentsValue, commitments.newCommitments.salt, commitments.recipientPublicKey,\
    maticAddress));

    //Verify Changes
    assert(commitmentsValue[1] == 0 || keys.zkpPublicKey == commitments.recipientPublicKey[1]);
    
     //Verify Fee change
    assert(commitmentsValue[2] == 0 || keys.zkpPublicKey == commitments.recipientPublicKey[2]);

    //Verify Kem Dem encryption
    assert(verify_encryption(tx.ercAddress,tx.tokenId, tx.compressedSecrets,\
        packedErcAddress,idRemainder,commitmentsValue[0],commitments.newCommitments.salt[0],\
        commitments.recipientPublicKey[0],tx.recipientAddress, transfer.ephemeralKey));

    return;
}
