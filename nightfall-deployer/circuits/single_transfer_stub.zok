type Point = field[2]

struct OldCommitmentPreimage {
	u32[8] id
	u8[31] value // needed to prevent overflow attacks in transfers
	field salt
	field hash
	field rootKey
}

struct NewCommitmentPreimage {
	Point zkpPublicKeyRecipient
	u8[31] value
	field salt
}

struct CompressedPoint {
	bool parity
	field ordinate
}

def main(\
	private field ercAddress,\
	private OldCommitmentPreimage oldCommitment,\
	private NewCommitmentPreimage newCommitment,\
	field newCommitmentHash,\
	field nullifier,\
	field root,\
	private field[32] path,\
	private field order,\
	private u32[8] ephemeralKey,\
	CompressedPoint compressedEphemeralPublicKey,\
	field[4] cipherText\
)->():

	field u = ercAddress + oldCommitment.salt + oldCommitment.hash + newCommitment.salt + newCommitment.zkpPublicKeyRecipient[0] + newCommitment.zkpPublicKeyRecipient[1] + nullifier + root + order + oldCommitment.rootKey

	for u32 i in 0..32 do
		u = u * path[i]
	endfor

	u32 v = oldCommitment.id[0] * oldCommitment.id[1] + oldCommitment.id[2] + oldCommitment.id[3] + oldCommitment.id[4] + oldCommitment.id[5] + oldCommitment.id[6] * oldCommitment.id[7]

	u8 w = 0
	for u32 i in 0..31 do
		w = w + newCommitment.value[i]
	endfor

	assert(u == u)
	assert(v == v)
	assert(w == w)

	return
