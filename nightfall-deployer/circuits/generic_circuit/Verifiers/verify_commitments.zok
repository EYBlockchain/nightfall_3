from "hashes/poseidon/poseidon.zok" import main as poseidon
from "../../common/utils/structures.zok" import Point, NUMBER_COMMITMENTS

/*
* Verify that all commitments are correct
*/
def main<NumCommitments, TxType>(\
    field packedErcAddress,\
    field idRemainder,\
    field[NUMBER_COMMITMENTS] commitments,\
    field[2] changeZkpPublicKeys,\
    private field[NumCommitments] newCommitmentValues,\
    private field[NumCommitments] newCommitmentSalts,\
    private Point[NumCommitments] recipientPublicKey\
) -> bool:

    //Determine whether the transaction has change or not
    bool change = if (TxType == 2 && NumCommitments > 0)\
        || (TxType == 1 && NumCommitments > 1) then true else false fi 

    //Check that all the nullifiers are valid. If NumNullifiers equals zero this loop will be ignored
    for u32 i in 0..NumCommitments do
        
        //Calculate the commmitment hash from the newCommitment parameters
        field commitment = poseidon([\
            packedErcAddress,\
            idRemainder,\
            newCommitmentValues[i],\
            ...recipientPublicKey[i],\
            newCommitmentSalts[i]\
        ])

        //Check that the calculated commitment matches with the one contained in the transaction
        assert(commitment == commitments[i])

        //If there is change, we need to check that the recipient public keys of the last commitment 
        //matches with the change public keys
        assert(change == false || i != NumCommitments - 1 || changeZkpPublicKeys == recipientPublicKey[i])
    endfor
    
    
    return true