from "../../common/casts/u32_array_to_field.zok" import main as u32_array_to_field
from "../../common/utils/structures.zok" import CompressedPoint

//TODO: This is not completed
def main<TxType, CInps, COuts, Change, Transfers>(\
    field ercAddress,\
    u32[8] tokenId,\
    field value,\
    field[COuts] commitments,\
	field[CInps] nullifiers,\
    field[CInps] roots,\
    field[Transfers] compressedEphemeralPublicKeyOrdinates,\
    field[Transfers][4] cipherText\
) -> bool:

    assert((TxType == 0 && Change == 0) || (TxType == 1 && (Change == 0 || Change == 1 && COuts > 1)) || (TxType == 2 && (Change == 0 || Change == 1 && COuts != 0)))

    assert((TxType != 1 && Transfers == 0) || (TxType == 1 && Transfers == COuts - Change))

    field id = u32_array_to_field(tokenId[0..8])
    assert((TxType == 1 && ercAddress == 0) || ercAddress != 0)
    assert((TxType == 1 && value == 0 && id == 0) || (TxType != 1 && (value != 0 || id != 0)))
    
    for u32 i in 0..COuts do
        assert(commitments[i] != 0)
    endfor

    for u32 i in 0..CInps do 
        assert(nullifiers[i] != 0)
        assert(roots[i] != 0)
    endfor

    for u32 i in 0..Transfers do
        for u32 j in 0..4 do
            assert((TxType == 1 && cipherText[i][j] != 0) || (TxType != 1 && cipherText[i][j] == 0))
        endfor
        assert((TxType == 1 && compressedEphemeralPublicKeyOrdinates[i] != 0) || (TxType != 1 &&  compressedEphemeralPublicKeyOrdinates[i] == 0))
    endfor
    
    return true