from "../../common/casts/u32_array_to_field.zok" import main as u32_array_to_field
from "../../common/utils/structures.zok" import PublicTransaction, NUMBER_COMMITMENTS, NUMBER_NULLIFIERS


def main<TxType, NumNullifiers, NumCommitments>(\
    PublicTransaction tx\
) -> (bool):

    assert(NumCommitments <= NUMBER_COMMITMENTS && NumNullifiers <= NUMBER_NULLIFIERS && TxType == tx.transactionType)

    assert(tx.ercAddress != 0)
    assert((TxType != 2 && tx.recipientAddress == 0)\
        || (TxType == 2 && tx.recipientAddress != 0))
    
    field id = u32_array_to_field(tx.tokenId)

    assert((TxType == 1 && id != 0 && tx.value == 0)\
        || (TxType != 1 && ((tx.tokenType == 0 && tx.value != 0 && id == 0)\
        || (tx.tokenType == 1 && tx.value == 0 && id != 0)\
        || (tx.tokenType == 2 && tx.value != 0 && id != 0))))
    
    //Check new commitments
    for u32 i in 0..NumCommitments do
        assert(tx.commitments[i] != 0)
    endfor
    for u32 i in NumCommitments..NUMBER_COMMITMENTS do
        assert(tx.commitments[i] == 0)
    endfor

    //Check Nullifiers
    for u32 i in 0..NumNullifiers do 
        assert(tx.nullifiers[i] != 0)
        assert(tx.historicRootBlockNumberL2[i] != 0)
    endfor
    for u32 i in 0..NUMBER_NULLIFIERS do 
        assert(tx.nullifiers[i] == 0)
        assert(tx.historicRootBlockNumberL2[i] == 0)
    endfor

    assert((TxType == 1 && tx.compressedSecrets[0] != 0 && tx.compressedSecrets[1] != 0)\
        || (TxType != 1 && tx.compressedSecrets[0] == 0 && tx.compressedSecrets[1] == 0))

    for u32 i in 0..4 do
        //Verify proof ?? How? 
    endfor 
    
    return true