from "ecc/edwardsCompress" import main as edwardsCompress
from "utils/pack/bool/nonStrictUnpack256.zok" import main as field_to_bool_256
from "utils/casts/u32_8_to_bool_256.zok" import main as u32_8_to_bool_256
from "../../common/casts/u32_array_to_field.zok" import main as u32_array_to_field
from "../../common/encryption/kem-dem.zok" import main as kemDem, EncryptedMsgs
from "../../common/utils/structures.zok" import Point

/*
* Verify that the secrets are encrypted properly in the Transfer
*/
def main<NumCommitments,Transfer>(\
    field ercAddress,\
    u32[8] tokenId,\
    field[2] compressedSecrets,\
    field packedErcAddress,\
    field idRemainder,\
    private field[NumCommitments] newCommitmentValues,\
    private field[NumCommitments] newCommitmentSalts,\
    private Point[NumCommitments] recipientPublicKey,\
    u32[8] recipientAddress,\
    private u32[Transfer][8] ephemeralKey\
) -> bool:

    // KEM-DEM Encryption
    for u32 i in 0..Transfer do
        field[4] cipherText = [ercAddress,u32_array_to_field(tokenId),compressedSecrets[0],compressedSecrets[1]]
        bool[256] bitEphemeralKey = u32_8_to_bool_256(ephemeralKey[0])

        field[4] plainTexts = [\
            packedErcAddress,\
            idRemainder,\
            newCommitmentValues[0],\
            newCommitmentSalts[0]\
        ]

        EncryptedMsgs<4> enc = kemDem(bitEphemeralKey, [recipientPublicKey[0][0], recipientPublicKey[0][1]], plainTexts)
        assert(cipherText == enc.cipherText)

        bool[256] compressedPubKeyOutput = edwardsCompress(enc.ephemeralPublicKey)
        assert(compressedPubKeyOutput == u32_8_to_bool_256(recipientAddress))
    endfor
    
    return true