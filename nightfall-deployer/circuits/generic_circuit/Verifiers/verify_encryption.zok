from "ecc/edwardsCompress" import main as edwardsCompress
from "utils/pack/bool/nonStrictUnpack256.zok" import main as field_to_bool_256
from "utils/casts/u32_8_to_bool_256.zok" import main as u32_8_to_bool_256
from "../../common/encryption/kem-dem.zok" import main as kemDem, EncryptedMsgs
from "../../common/utils/structures.zok" import Point

def main<COuts, Transfers>(\
    field packedErcAddress,\
    field idRemainder,\
    private field[COuts] newCommitmentValues,\
    private field[COuts] newCommitmentSalts,\
    private Point[COuts] recipientPublicKey,\
    bool[Transfers] compressedEphemeralPublicKeyParities,\
    field[Transfers] compressedEphemeralPublicKeyOrdinates,\
	field[Transfers][4] cipherText,\
    private u32[Transfers][8] ephemeralKey\
) -> bool:

    // KEM-DEM Encryption
    for u32 i in 0..Transfers do
        bool[256] bitEphemeralKey = u32_8_to_bool_256(ephemeralKey[i])

        field[4] plainTexts = [\
            packedErcAddress,\
            idRemainder,\
            newCommitmentValues[i],\
            newCommitmentSalts[i]\
        ]

        EncryptedMsgs<4> enc = kemDem(bitEphemeralKey, [recipientPublicKey[i][0], recipientPublicKey[i][1]], plainTexts)
        assert(cipherText[i] == enc.cipherText)

        bool[256] compressedPubKeyOutput = edwardsCompress(enc.ephemeralPublicKey)
        bool parity = compressedEphemeralPublicKeyParities[i]
        bool[256] ordinate = field_to_bool_256(compressedEphemeralPublicKeyOrdinates[i])
        bool[256] compressedCheck256 = [ parity, ...ordinate[1..256] ]
        assert(compressedPubKeyOutput == compressedCheck256)
    endfor
    
    return true