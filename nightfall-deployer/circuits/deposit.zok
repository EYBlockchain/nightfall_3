
from "./common/utils/structures.zok" import Point, PublicTransaction, Nullifiers, Commitments, Transfer, SHIFT
from "./common/utils/calculations.zok" import sum
from "./common/casts/u32_array_to_field.zok" import main as u32_array_to_field
from "./common/casts/u8_array_to_field.zok" import main as u8_array_to_field
from "./common/generic_circuit/Verifiers/verify_structure.zok" import main as verify_structure
from "./common/generic_circuit/Verifiers/verify_commitments.zok" import main as verify_commitments

def main(\
    PublicTransaction tx,\
    private field salt,\
    private Point recipientPublicKey\
)-> ():
    
    //Verify public transaction structure
    assert(verify_structure::<0>(\
        tx.value,\
        tx.fee,\
	    tx.transactionType,\
	    tx.tokenType,\
	    tx.tokenId,\
	    tx.ercAddress,\
	    tx.recipientAddress,\
	    tx.commitments,\
	    tx.nullifiers,\
        tx.commitmentFee,\
        tx.nullifiersFee,\
	    tx.historicRootBlockNumberL2,\
        tx.historicRootBlockNumberL2Fee,\
	    tx.compressedSecrets\
    ))

    // pack the top four bytes of the token id into the ercAddress field (address only
	// uses 160 bits and the Shield contract prevents creation of something with more than 160 bits)
    field idRemainder = u32_array_to_field(tx.tokenId[1..8]) 
    field packedErcAddress = tx.ercAddress + u32_array_to_field([tx.tokenId[0]]) * SHIFT 

    //Verify new Commmitments
    assert(verify_commitments::<1,1>(packedErcAddress, idRemainder, [tx.commitments[0]],\
    [tx.value], [salt], [recipientPublicKey]))

    return
