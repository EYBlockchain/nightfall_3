from "./common/utils/structures.zok" import CommitmentPreimage,Point, PublicTransaction, SHIFT
from "./common/generic_circuit/Verifiers/verify_commitments.zok" import main as verify_commitments
from "./common/generic_circuit/Verifiers/verify_structure.zok" import main as verify_structure
from "./common/casts/u32_array_to_field.zok" import main as u32_array_to_field

const u32 txType = 0
const u32 numCommitments = 1
const u32 numNullifiers = 0
const u32 transfer = 0

def main(\
    PublicTransaction tx,\
	private field salt,\
    private Point[numCommitments] recipientPublicKey\
    ) -> ():

    //Verify public transaction structure
    assert(verify_structure::<txType, numNullifiers, numCommitments>(\
        tx.value,\
	    tx.transactionType,\
	    tx.tokenType,\
	    tx.tokenId,\
	    tx.ercAddress,\
	    tx.recipientAddress,\
	    tx.commitments,\
	    tx.nullifiers,\
	    tx.historicRootBlockNumberL2,\
	    tx.compressedSecrets\
    ))

    // pack the top four bytes of the token id into the ercAddress field (address only
	// uses 160 bits and the Shield contract prevents creation of something with more than 160 bits)
    field idRemainder = u32_array_to_field(tx.tokenId[1..8]) 
    field packedErcAddress = tx.ercAddress + u32_array_to_field([tx.tokenId[0]]) * SHIFT 

    //Verify new Commmitments
    Point firstInputZkpPublicKeys = [0,0]
    assert(verify_commitments::<numCommitments, txType>(\
		packedErcAddress,\
		idRemainder,\
		tx.commitments,\
		firstInputZkpPublicKeys,\
		[tx.value],\
		[salt],\
		recipientPublicKey\
	))
    
    return
