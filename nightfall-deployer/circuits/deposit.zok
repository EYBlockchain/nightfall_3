from "./common/hashes/sha256/pad1280ThenHash.zok" import main as sha256of1280
from "utils/casts/u32_to_bits.zok" import main as u32_to_bool_32
from "utils/pack/u32/nonStrictUnpack256.zok" import main as field_to_u32_8

// Inputs for main:
// - ercContractAddress (public) is the ERCx contract address
// - value (public) is the 256 bit value (fungible) or identifier (non-fungible)
// - publicKey (private) is the public key of the newCommitment derived by hashing the Secret Key Sk of the newCommitment. IT IS KEPT PRIVATE!!
// - salt (private) is the salt for the newCommitment
// - newCommitment (public) is the newCommitment

def main(\
	field ercContractAddress,\
	field id,\
 	field value,\
	private u32[8] compressedPkd,\
	private u32[8] salt,\
	field newCommitment\
)->():

	u32[8] newCommitmentU32 = field_to_u32_8(newCommitment)
	u32[8] newCommitmentCheck = sha256of1280([\
		...field_to_u32_8(ercContractAddress),\
		...field_to_u32_8(id),\
		...field_to_u32_8(value),\
		...compressedPkd,\
		...salt\
	])

	// new commitments are truncated to 248 bits since they are public inputs
	// so we must check the 248 bits while minimising constraints/comp time - casting to bool[256] is a slower operation than comparing u32s

	// last 224 bits:
	assert(newCommitmentCheck[1..8] == newCommitmentU32[1..8])
	// first 24 bits:
	assert(u32_to_bool_32(newCommitmentCheck[0])[8..32] == u32_to_bool_32(newCommitmentU32[0])[8..32])

	return
