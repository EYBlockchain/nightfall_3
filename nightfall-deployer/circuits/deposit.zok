from "hashes/poseidon/poseidon.zok" import main as poseidon
from "./common/casts/u32_array_to_field.zok" import main as u32_array_to_field

// Inputs for main:
// - ercContractAddress (public) is the ERCx contract address
// - value (public) is the 256 bit value (fungible) or identifier (non-fungible)
// - publicKey (private) is the public key of the newCommitment derived by hashing the Secret Key Sk of the newCommitment. IT IS KEPT PRIVATE!!
// - salt (private) is the salt for the newCommitment
// - newCommitment (public) is the newCommitment

type Point = field[2]

// 2 ^ 161
const field SHIFT = 1461501637330902918203684832716283019655932542976

def main(\
	field ercContractAddress,\
	u32[8] id,\
 	field value,\
	private Point compressedZkpPublicKey,\
	private field salt,\
	field newCommitment\
)->():

	// pack the top four bytes of the token id into the ercAddress field (address only
	// uses 160 bits and the Shield contract prevents creation of something with more than 160 bits)
	field idTop4Bytes = u32_array_to_field([id[0]])
	field idRemainder = u32_array_to_field(id[1..8])
	field packedErcAddress = ercContractAddress + idTop4Bytes * SHIFT

	field newCommitmentCheck = poseidon([
		packedErcAddress,\
		idRemainder,\
		value,\
		...compressedZkpPublicKey,\
		salt\
	])
	assert(newCommitmentCheck == newCommitment)

	return
