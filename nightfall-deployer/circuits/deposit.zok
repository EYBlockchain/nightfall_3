from "./common/utils/structures.zok" import Point, PublicTransaction, Nullifiers, Commitments, Transfer, SHIFT;
from "./common/utils/calculations.zok" import sum;
from "./common/casts/u32_array_to_field.zok" import main as u32_array_to_field;
from "./common/casts/u8_array_to_field.zok" import main as u8_array_to_field;
from "./common/verifiers/verify_duplicates.zok" import main as verify_duplicates;
from "./common/verifiers/commitments/verify_commitments.zok" import main as verify_commitments;
from "utils/pack/u32/nonStrictUnpack256.zok" import main as field_to_u32_8;

const u32 numberCommitments = 1;
const u32 numberNullifiers = 0;

def main(\
    PublicTransaction<numberNullifiers,numberCommitments> tx,\
    field[numberNullifiers] roots,\
    field feeAddress,\
    private Commitments<numberCommitments> commitmentsInfo\
) {

        //Verify public transaction structure
        assert(tx.ercAddress != 0);
        assert(tx.recipientAddress == field_to_u32_8(0));
        
        //Check that combination id and value matches the token type
        //ERC20 -> Value > 0 and Id == 0
        //ERC721 -> Value == 0
        //ERC1155 -> Value > 0
        field id = u32_array_to_field(tx.tokenId);
        assert((tx.tokenType == 0 && tx.value != 0 && id == 0)\
                ||  (tx.tokenType == 1 && tx.value == 0)\
                ||  (tx.tokenType == 2 && tx.value != 0));
        
        assert(tx.compressedSecrets[0] == 0 && tx.compressedSecrets[1] == 0);

        assert(tx.commitments[0] != 0);
        
        field[numberCommitments] commitmentsValue = u8_array_to_field(commitmentsInfo.newCommitments.value);

        assert(tx.value == sum(commitmentsValue));

        //Verify duplicates
        assert(verify_duplicates::<numberNullifiers,numberCommitments>(tx.commitments, tx.nullifiers));


        // pack the top four bytes of the token id into the ercAddress field (address only
        // uses 160 bits and the Shield contract prevents creation of something with more than 160 bits)
        field idRemainder = u32_array_to_field(tx.tokenId[1..8]); 
        field packedErcAddress = tx.ercAddress + u32_array_to_field([tx.tokenId[0]]) * SHIFT;

        //Verify new Commmitments
        assert(verify_commitments::<numberCommitments>(packedErcAddress, idRemainder, tx.commitments,\
        commitmentsValue, commitmentsInfo.newCommitments.salt,commitmentsInfo.recipientPublicKey));
}
