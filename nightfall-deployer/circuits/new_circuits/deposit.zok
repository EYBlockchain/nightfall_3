
from "../common/utils/structures.zok" import Point, PublicTransaction, Nullifiers, Commitments, Transfer, SHIFT
from "../common/utils/calculations.zok" import sum
from "../common/casts/u32_array_to_field.zok" import main as u32_array_to_field
from "../common/generic_circuit/Verifiers/verify_structure.zok" import main as verify_structure
from "../common/generic_circuit/Verifiers/verify_encryption.zok" import main as verify_encryption
from "../common/generic_circuit/Verifiers/verify_nullifiers.zok" import main as verify_nullifiers
from "../common/generic_circuit/Verifiers/verify_commitments.zok" import main as verify_commitments

def main(\
    PublicTransaction tx,\
    field[2] nullifierRoots,\
    field[2] nullifierRootsFee,\
    field ercAddressFee,\
    private Commitments<1> commitments,\
    private Nullifiers<2> nullifiers\
)-> ():
    
    //Verify public transaction structure
    assert(verify_structure::<0>(\
        tx.value,\
	    tx.transactionType,\
	    tx.tokenType,\
	    tx.tokenId,\
	    tx.ercAddress,\
	    tx.recipientAddress,\
	    tx.commitments,\
	    tx.nullifiers,\
	    tx.historicRootBlockNumberL2,\
	    tx.compressedSecrets,\
        tx.fee,\
        tx.commitmentsFee,\
        tx.nullifiersFee\
    ))

    //Check that values match
    assert(tx.value == sum(commitments.newCommitments.value))

    // pack the top four bytes of the token id into the ercAddress field (address only
	// uses 160 bits and the Shield contract prevents creation of something with more than 160 bits)
    field idRemainder = u32_array_to_field(tx.tokenId[1..8]) 
    field packedErcAddress = tx.ercAddress + u32_array_to_field([tx.tokenId[0]]) * SHIFT 

    //Verify nullifiers
    Point firstInputZkpPublicKeys = verify_nullifiers::<2>(packedErcAddress, idRemainder,\
        tx.nullifiers, nullifierRoots, nullifiers.oldCommitments.value, nullifiers.oldCommitments.salt,\
        nullifiers.rootKey, nullifiers.paths, nullifiers.orders)

    //Verify new Commmitments
    assert(verify_commitments::<1>(packedErcAddress, idRemainder, firstInputZkpPublicKeys, [tx.commitments[0]],\
    commitments.newCommitments.value, commitments.newCommitments.salt, commitments.recipientPublicKey))

    //Verify Change
    assert(nullifiers.oldCommitments.value[0] == 0 || firstInputZkpPublicKeys == commitments.recipientPublicKey[0])

    return
