
from "../common/utils/structures.zok" import Point, PublicTransaction, Nullifiers, Commitments, Transfer, SHIFT
from "../common/utils/calculations.zok" import sum
from "../common/casts/u32_array_to_field.zok" import main as u32_array_to_field
from "../common/generic_circuit/Verifiers/verify_structure.zok" import main as verify_structure
from "../common/generic_circuit/Verifiers/verify_encryption.zok" import main as verify_encryption
from "../common/generic_circuit/Verifiers/verify_nullifiers.zok" import main as verify_nullifiers
from "../common/generic_circuit/Verifiers/verify_commitments.zok" import main as verify_commitments

def main(\
    PublicTransaction tx,\
    field[2] nullifierRoots,\
    field[2] nullifierRootsFee,\
    field ercAddressFee,\
    private Nullifiers<2> nullifiers,\
    private Commitments<2> commitments,\
    private Nullifiers<2> nullifiersFee,\
    private Commitments<1> commitmentsFee,\
    private Transfer transfer\
)-> ():
    
    //Verify public transaction structure
    assert(verify_structure::<1>(\
        tx.value,\
	    tx.transactionType,\
	    tx.tokenType,\
	    tx.tokenId,\
	    tx.ercAddress,\
	    tx.recipientAddress,\
	    tx.commitments,\
	    tx.nullifiers,\
	    tx.historicRootBlockNumberL2,\
	    tx.compressedSecrets,\
        tx.fee,\
        tx.commitmentsFee,\
        tx.nullifiersFee\
    ))

    //Check that values match
    assert(sum(nullifiers.oldCommitments.value) == sum(commitments.newCommitments.value))

    //Check that values fee match
    assert(sum(nullifiersFee.oldCommitments.value) == tx.fee + sum(commitmentsFee.newCommitments.value))

    // pack the top four bytes of the token id into the ercAddress field (address only
	// uses 160 bits and the Shield contract prevents creation of something with more than 160 bits)
    field idRemainder = u32_array_to_field(transfer.idTransfer[1..8]) 
    field packedErcAddress = transfer.ercAddressTransfer + u32_array_to_field([transfer.idTransfer[0]]) * SHIFT 

    //Verify nullifiers
    Point firstInputZkpPublicKeys = verify_nullifiers::<2>(packedErcAddress, idRemainder,\
        tx.nullifiers, nullifierRoots, nullifiers.oldCommitments.value, nullifiers.oldCommitments.salt,\
        nullifiers.rootKey, nullifiers.paths, nullifiers.orders)

    //Verify new Commmitments
    assert(verify_commitments::<2>(packedErcAddress, idRemainder, tx.commitments, firstInputZkpPublicKeys,\
    commitments.newCommitments.value, commitments.newCommitments.salt, commitments.recipientPublicKey))
        
    //Verify Change
    assert(commitments.newCommitments.value[1] == 0 || firstInputZkpPublicKeys == commitments.recipientPublicKey[1])
    
    //Verify Kem Dem encryption
    assert(verify_encryption(tx.ercAddress,tx.tokenId, tx.compressedSecrets,\
        packedErcAddress,idRemainder,commitments.newCommitments.value[0],commitments.newCommitments.salt[0],\
        commitments.recipientPublicKey[0],tx.recipientAddress, transfer.ephemeralKey))

    //Verify Fee Nullifiers
    Point firstInputZkpPublicKeysFee = verify_nullifiers::<2>(ercAddressFee, 0,\
        tx.nullifiersFee, nullifierRootsFee, nullifiersFee.oldCommitments.value, nullifiersFee.oldCommitments.salt,\
        nullifiersFee.rootKey, nullifiersFee.paths, nullifiersFee.orders)

    //Verify Fee Commitments
    assert(verify_commitments::<1>(ercAddressFee, 0, firstInputZkpPublicKeysFee,\
    tx.commitmentsFee, commitmentsFee.newCommitments.value,commitmentsFee.newCommitments.salt,\
    commitmentsFee.recipientPublicKey))

    //Verify Fee change
    assert(commitments.newCommitments.value[0] == 0 || firstInputZkpPublicKeys == commitments.recipientPublicKey[0])

    return
