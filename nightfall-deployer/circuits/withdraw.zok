from "ecc/babyjubjubParams" import BabyJubJubParams
from "ecc/babyjubjubParams" import main as curveParams
from "ecc/edwardsCompress" import main as edwardsCompress
from "ecc/edwardsScalarMult" import main as scalarMult

from "utils/casts/bool_256_to_u32_8.zok" import main as bool_256_to_u32_8
from "utils/casts/u32_to_bits.zok" import main as u32_to_bool_32
from "utils/pack/bool/nonStrictUnpack256.zok" import main as field_to_bool_256
from "utils/pack/u32/pack256.zok" import main as u32_8_to_field
from "utils/pack/u32/nonStrictUnpack256.zok" import main as field_to_u32_8

from "./common/hashes/mimc/mimc-hash-2.zok" import main as mimc2
from "./common/hashes/sha256/pad512ThenHash.zok" import main as sha256of512
from "./common/hashes/sha256/pad1280ThenHash.zok" import main as sha256of1280

from "./common/merkle-tree/mimc-path-check.zok" import main as pathCheck

struct OldCommitmentPreimage {
	u32[8] salt
	u32[8] hash
	field rootKey
}

def main(\
	field fErcAddress,\
	field fId,\
 	field fValue,\
	private OldCommitmentPreimage oldCommitment,\
	field fNullifier,\
	field recipientAddress,\
	field root,\
	private field[32] path,\
	private field order\
)->():

	BabyJubJubParams context = curveParams()
	field[2] g = [context.Gu, context.Gv]

	// Calculation of zkpPrivateKey and nullifierKey from rootKey
	field zkpPrivateKey = mimc2([oldCommitment.rootKey, 2708019456231621178814538244712057499818649907582893776052749473028258908910])
	field nullifierKey = mimc2([oldCommitment.rootKey, 7805187439118198468809896822299973897593108379494079213870562208229492109015])
	u32[8] nullifierKeyU328 = field_to_u32_8(nullifierKey)

	bool[256] zkpPrivateKeyBool = field_to_bool_256(zkpPrivateKey)
	field[2] zkpPublicKey = scalarMult(zkpPrivateKeyBool, g, context)
	bool[256] zkpPublicKeyBool = edwardsCompress(zkpPublicKey)
	u32[8] zkpPublicKeyU32 = bool_256_to_u32_8(zkpPublicKeyBool)

	u32[8] ercAddress = field_to_u32_8(fErcAddress)
	u32[8] id = field_to_u32_8(fId)
	u32[8] value = field_to_u32_8(fValue)
	u32[8] nullifier = field_to_u32_8(fNullifier)

	// check the nullifier is valid
	u32[8] sha = sha256of512([\
		...nullifierKeyU328,\
		...oldCommitment.hash\
	])

	// nullifiers are truncated to 248 bits since they are public inputs
	// so we must check the 248 bits while minimising constraints/comp time - casting to bool[256] is a slower operation than comparing u32s

	// last 224 bits:
	assert(sha[1..8] == nullifier[1..8])
	// first 24 bits:
	assert(u32_to_bool_32(sha[0])[8..32] == u32_to_bool_32(nullifier[0])[8..32])

	// check the old commitment is valid
	sha = sha256of1280([\
		...ercAddress,\
		...id,\
		...value,\
		...zkpPublicKeyU32,\
		...oldCommitment.salt\
	])
	// last 224 bits:
	assert(sha[1..8] == oldCommitment.hash[1..8])
	// first 24 bits:
	assert(u32_to_bool_32(sha[0])[8..32] == u32_to_bool_32(oldCommitment.hash[0])[8..32])

	// check that the old commitment is in the merkle tree
	field mimcHash = u32_8_to_field(oldCommitment.hash)
	assert(pathCheck([root, ...path], order, mimcHash))

	return
