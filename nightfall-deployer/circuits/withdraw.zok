from "./common/utils/structures.zok" import Point, PublicTransaction, Nullifiers, Commitments, Transfer, SHIFT
from "./common/utils/calculations.zok" import sum
from "./common/casts/u32_array_to_field.zok" import main as u32_array_to_field
from "./common/casts/u8_array_to_field.zok" import main as u8_array_to_field
from "./common/generic_circuit/Verifiers/verify_structure.zok" import main as verify_structure
from "./common/generic_circuit/Verifiers/verify_encryption.zok" import main as verify_encryption
from "./common/generic_circuit/Verifiers/verify_nullifiers.zok" import main as verify_nullifiers
from "./common/generic_circuit/Verifiers/verify_commitments.zok" import main as verify_commitments

def main(\
    PublicTransaction tx,\
    field[2] nullifierRoots,\
    field[2] nullifierRootsFee,\
    field ercAddressFee,\
    private Nullifiers<2> nullifiers,\
    private Commitments<2> commitments,\
    private Nullifiers<2> nullifiersFee,\
    private Commitments<1> commitmentFee\
)-> ():
    
    field value = u8_array_to_field(tx.value)
    field fee = u8_array_to_field(tx.fee)

    //Verify public transaction structure
    assert(verify_structure::<2>(\
        value,\
	    tx.transactionType,\
	    tx.tokenType,\
	    tx.tokenId,\
	    tx.ercAddress,\
	    tx.recipientAddress,\
	    tx.commitments,\
	    tx.nullifiers,\
	    tx.historicRootBlockNumberL2,\
	    tx.compressedSecrets,\
        fee,\
        tx.commitmentFee,\
        tx.nullifiersFee\
    ))

    field[2] nullifiersValue = [\
        u32_array_to_field(nullifiers.oldCommitments.value[0]),\
        u32_array_to_field(nullifiers.oldCommitments.value[1])\
    ]
    field[2] commitmentsValue = [\
        u32_array_to_field(commitments.newCommitments.value[0]),\
        u32_array_to_field(commitments.newCommitments.value[1])\
    ]

    field[2] nullifiersFeeValue = [\
        u32_array_to_field(nullifiersFee.oldCommitments.value[0]),\
        u32_array_to_field(nullifiersFee.oldCommitments.value[1])\
        ]

    field[1] commitmentFeeValue = [u32_array_to_field(commitmentFee.newCommitments.value[0])]

    //Check that values match
    assert(sum(nullifiersValue) == sum(commitmentsValue) + value)

    //Check that values fee match
    assert(sum(nullifiersFeeValue) == fee + sum(commitmentFeeValue))

    // pack the top four bytes of the token id into the ercAddress field (address only
	// uses 160 bits and the Shield contract prevents creation of something with more than 160 bits)
    field idRemainder = u32_array_to_field(tx.tokenId[1..8]) 
    field packedErcAddress = tx.ercAddress + u32_array_to_field([tx.tokenId[0]]) * SHIFT 

    //Verify nullifiers
    Point firstInputZkpPublicKeys = verify_nullifiers::<2>(packedErcAddress, idRemainder,\
        tx.nullifiers, nullifierRoots, nullifiersValue, nullifiers.oldCommitments.salt,\
        nullifiers.rootKey, nullifiers.paths, nullifiers.orders)

    //Verify new Commmitments
    assert(verify_commitments::<2>(packedErcAddress, idRemainder, tx.commitments, firstInputZkpPublicKeys,\
    commitmentsValue, commitments.newCommitments.salt, commitments.recipientPublicKey))

    //Verify Change
    assert(commitmentsValue[0] == 0 || firstInputZkpPublicKeys == commitments.recipientPublicKey[0])

    //Verify Fee Nullifiers
    Point firstInputZkpPublicKeysFee = verify_nullifiers::<2>(ercAddressFee, 0,\
        tx.nullifiersFee, nullifierRootsFee, nullifiersFeeValue, nullifiersFee.oldCommitments.salt,\
        nullifiersFee.rootKey, nullifiersFee.paths, nullifiersFee.orders)

    //Verify Fee Commitments
    assert(verify_commitments::<1>(ercAddressFee, 0, firstInputZkpPublicKeysFee,\
    tx.commitmentFee, commitmentFeeValue,commitmentFee.newCommitments.salt,\
    commitmentFee.recipientPublicKey))

    //Verify Fee change
    assert(commitmentFeeValue[0] == 0 || firstInputZkpPublicKeys == commitments.recipientPublicKey[0])

    return

