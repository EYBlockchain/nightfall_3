from "ecc/babyjubjubParams" import BabyJubJubParams, main as curveParams
from "ecc/edwardsScalarMult" import main as scalarMult
from "utils/pack/bool/nonStrictUnpack256.zok" import main as field_to_bool_256
from "hashes/poseidon/poseidon.zok" import main as poseidon
from "../../utils/structures.zok" import Point, PRIVATE_KEY_DOMAIN, NULLIFIER_KEY_DOMAIN
from "../../merkle-tree/path-check.zok" import main as pathCheck

/*
* Verify that all the nullifiers are correct
*/
def main<NumNullifiers>(\
    field packedErcAddress,\
    field idRemainder,\
    field[NumNullifiers] nullifierHashes,\
    field[NumNullifiers] roots,\
    private field[NumNullifiers] oldCommitmentValues,\
    private field[NumNullifiers] oldCommitmentSalts,\
    private field[NumNullifiers] rootKey,\
    private field[NumNullifiers][32] paths,\
	private field[NumNullifiers] orders\
) -> (Point):
    // Get Curve Params
    BabyJubJubParams context = curveParams()
    Point g = [context.Gu, context.Gv]

    //If the transaction contains change, the receiver of that change MUST be the same user that 
    //created the transaction. In this field[2] we will store the zkpPublicKey of the sender in case
    //we need it to check the change. 
    Point firstInputZkpPublicKeys = [0,0]

    //Check that all the nullifiers are valid. If NumNullifiers equals zero this loop will be ignored
    for u32 i in 0..NumNullifiers do
        // Calculation of zkpPrivateKey and nullifierKey from rootKey
        field zkpPrivateKeys = poseidon([rootKey[i], PRIVATE_KEY_DOMAIN])
        field nullifierKeys = poseidon([rootKey[i], NULLIFIER_KEY_DOMAIN])

        // Calculate zkpPublicKey
        Point zkpPublicKeys = scalarMult(field_to_bool_256(zkpPrivateKeys), g, context)

        //Calculate the nullifier hash from the oldCommitment parameters
        field calculatedOldCommitmentHash = poseidon([\
            packedErcAddress,\
            idRemainder,\
            oldCommitmentValues[i],\
            ...zkpPublicKeys,\
            oldCommitmentSalts[i]\
        ])
        field nullifier = poseidon([nullifierKeys, calculatedOldCommitmentHash])

        //Check that the calculated nullifier matches with the one contained in the transaction
        assert(oldCommitmentValues[i] == 0 || nullifier == nullifierHashes[i])

        //Check that the nullifier is contained in the tree
        assert(oldCommitmentValues[i] == 0 || pathCheck([roots[i], ...paths[i]], orders[i], calculatedOldCommitmentHash))

        //Set the changeZkpPublicKeys if i = 0. Otherwise just set the same value
        firstInputZkpPublicKeys = i == 0 ? zkpPublicKeys : firstInputZkpPublicKeys
    endfor
    
    return firstInputZkpPublicKeys
