from "./structures.zok" import Point, PRIVATE_KEY_DOMAIN, NULLIFIER_KEY_DOMAIN;
from "ecc/babyjubjubParams" import BabyJubJubParams, main as curveParams;
from "ecc/edwardsScalarMult" import main as scalarMult;
from "utils/pack/bool/nonStrictUnpack256.zok" import main as field_to_bool_256;
from "hashes/poseidon/poseidon.zok" import main as poseidon;

struct Keys {
    field nullifierKey;
    Point zkpPublicKey;
}

def main(field rootKey) -> Keys {
    BabyJubJubParams context = curveParams();
    Point g = [context.Gu, context.Gv];

     // Calculation of zkpPrivateKey and nullifierKey from rootKey
    field zkpPrivateKey = poseidon([rootKey, PRIVATE_KEY_DOMAIN]);
    field nullifierKey = poseidon([rootKey, NULLIFIER_KEY_DOMAIN]);

    // Calculate zkpPublicKey
    Point zkpPublicKey = scalarMult(field_to_bool_256(zkpPrivateKey), g, context);
    Keys keys = Keys { nullifierKey: nullifierKey, zkpPublicKey: zkpPublicKey};
    return keys;
}
