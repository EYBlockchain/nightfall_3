
from "ecc/edwardsCompress" import main as edwardsCompress;
from "hashes/poseidon/poseidon.zok" import main as poseidon;
from "utils/casts/u32_8_to_bool_256.zok" import main as u32_8_to_bool_256;
from "utils/pack/bool/nonStrictUnpack256.zok" import main as field_to_bool_256;
from "utils/pack/u32/pack256.zok" import main as u32_8_to_field;
from "./structures.zok" import CommitmentPreimage, Point;

def sum<N>(field[N] a) -> field {
    field mut res = 0;
    for u32 i in 0..N {
        res = res + a[i];
    }
    return res;
}

def calculateCommitmentHashesN<N>(\
    field packedErcAddress,\
    field idRemainder,\
    field[N] value,\
    Point[N] zkpPublicKeyRecipient,\
    field[N] salt\
    ) -> field[N] {
    field[N] mut output = [0; N];
    for u32 i in 0..N {
        output[i] = poseidon([\
            packedErcAddress,\
            idRemainder,\
            value[i],\
            zkpPublicKeyRecipient[i][0],\
            zkpPublicKeyRecipient[i][1],\
            salt[i]\
        ]);
    }
    return output;
}

def calculateCommitmentHash(\
    field packedErcAddress,\
    field idRemainder,\
    field[1] value,\
    Point[1] zkpPublicKeyRecipient,\
    field[1] salt\
    ) -> field {
    field[1] output = calculateCommitmentHashesN(packedErcAddress,idRemainder, value, zkpPublicKeyRecipient, salt);
    return output[0];
}


def calculateNullifier(\
    field nullifierKey,\
    field commitmentHashes\
) -> field {
    return poseidon([nullifierKey,commitmentHashes]);
}

def calculateNullifiersN<N>(\
    field[N] nullifierKey,\
    field[N] commitmentHashes\
) -> field[N] {
    field[N] mut output = [0; N];
    for u32 i in 0..N {
        output[i] = calculateNullifier(nullifierKey[i], commitmentHashes[i]);
    }
    return output;
}
