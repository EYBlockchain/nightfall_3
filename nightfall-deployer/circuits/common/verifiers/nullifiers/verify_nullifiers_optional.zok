from "hashes/poseidon/poseidon.zok" import main as poseidon;
from "../../utils/structures.zok" import Point;
from "../../utils/path-check.zok" import main as pathCheck;

/*
* Verify that all nullifiers are correct and corresponds to packedErcAddress. If nullifier value is zero, it is considered valid
*/
def main<N>(\
    field packedErcAddress,\
    field idRemainder,\
    field[N] nullifierHashes,\
    field[N] roots,\
    private field[N] oldCommitmentValues,\
    private field[N] oldCommitmentSalts,\
    private field[N][32] paths,\
	private field[N] orders,\
    private field nullifierKeys,\
    private Point zkpPublicKeys\
) -> bool {
   
    for u32 i in 0..N {
        //Calculate old commitment hash
        field calculatedOldCommitmentHash = poseidon([\
            packedErcAddress,\
            idRemainder,\
            oldCommitmentValues[i],\
            ...zkpPublicKeys,\
            oldCommitmentSalts[i]\
        ]);

        //Calculate corresponding nullifier
        field nullifier = if(oldCommitmentValues[i] == 0) { 
            0 } else { poseidon([nullifierKeys, calculatedOldCommitmentHash]) };

        //Check that the calculated nullifier matches with the one contained in the transaction
        assert(nullifier == nullifierHashes[i]);

        //Check that the nullifier is contained in the tree
        bool pathValidity = if(oldCommitmentValues[i] == 0) {
            true } else { pathCheck([roots[i], ...paths[i]], orders[i], calculatedOldCommitmentHash) };
        assert(pathValidity);
    }
    
    return true;
}
