from "./common/utils/structures.zok" import Point, PublicTransaction, Nullifiers, Commitments, Transfer;
from "./common/stubs/nullifiers_stub.zok" import main as nullifier_stub;
from "./common/stubs/commitments_stub.zok" import main as commitment_stub;
from "./common/stubs/encryption_stub.zok" import main as encryption_stub;
from "./common/casts/u8_array_to_field.zok" import main as u8_array_to_field;

const u32 numberCommitments = 2;
const u32 numberNullifiers = 4;

def main(\
    PublicTransaction<numberNullifiers,numberCommitments> tx,\
    field[numberNullifiers] roots,\
    field feeAddress,\
    private field rootKey,\
    private Nullifiers<numberNullifiers> nullifiersInfo,\
    private Commitments<numberCommitments> commitmentsInfo\
) {
        field[numberNullifiers] nullifiersValue = u8_array_to_field(nullifiersInfo.oldCommitments.value);
        field[numberCommitments] commitmentsValue = u8_array_to_field(commitmentsInfo.newCommitments.value);

        assert(nullifier_stub::<numberNullifiers>(\
                roots,  nullifiersValue,  nullifiersInfo.oldCommitments.salt,\
                nullifiersInfo.paths, nullifiersInfo.orders, rootKey));

        assert(commitment_stub::<numberCommitments>(commitmentsValue,\
                commitmentsInfo.newCommitments.salt, commitmentsInfo.recipientPublicKey));
}
