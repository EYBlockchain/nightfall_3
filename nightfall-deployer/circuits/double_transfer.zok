from "ecc/babyjubjubParams" import BabyJubJubParams
from "ecc/babyjubjubParams" import main as curveParams
from "ecc/edwardsScalarMult" import main as scalarMult
from "ecc/edwardsCompress" import main as edwardsCompress
from "./common/encryption/el-gamal4" import main as enc4

from "utils/casts/u32_to_bits.zok" import main as u32_to_bool_32
from "utils/casts/bool_256_to_u32_8.zok" import main as bool_256_to_u32_8
from "utils/pack/bool/nonStrictUnpack256.zok" import main as field_to_bool_256
from "utils/pack/u32/pack256.zok" import main as u32_8_to_field
from "utils/pack/u32/nonStrictUnpack256.zok" import main as field_to_u32_8
from "./common/casts/u8_array_to_field.zok" import main as u8_array_to_field
from "./common/casts/u32_array_to_field.zok" import main as u32_array_to_field

from "./common/hashes/mimc/mimc-hash-2.zok" import main as mimc2
from "./common/hashes/sha256/pad512ThenHash.zok" import main as sha256of512
from "./common/hashes/sha256/pad1280ThenHash.zok" import main as sha256of1280
from "hashes/poseidon/poseidon.zok" import main as poseidon
from "./common/merkle-tree/mimc-path-check.zok" import main as pathCheck

type Point = field[2]

// 2 ^ 161
const field SHIFT = 2923003274661805836407369665432566039311865085952

struct OldCommitmentPreimage {
	u32[8] id
	u8[31] value
	field salt
	field hash
	field ask
}

struct NewCommitmentPreimage {
	Point pkdRecipient
	u8[31] value
	field salt
}

struct Secrets {
	u32[8] ephemeralKey1
	u32[8] ephemeralKey2
	u32[8] ephemeralKey3
	u32[8] ephemeralKey4
	field[16] cipherText
	field sqrtMessage1
	field sqrtMessage2
	field sqrtMessage3
	field sqrtMessage4
}

struct CompressedPoint {
	bool parity
	field ordinate
}

def main(\
	private field[2] ercAddress,\
	private OldCommitmentPreimage[2] oldCommitment,\
	private NewCommitmentPreimage[2] newCommitment,\
	field[2] newCommitmentHash,\
	private field[2] nsk,\
	field[2] nullifier,\
	field[2] root,\
	private field[2][32] path,\
	private field[2] order,\
	private Secrets secrets,\
	CompressedPoint[8] compressedCipherText\
)->():

	BabyJubJubParams context = curveParams()
	field[2] g = [context.Gu, context.Gv]

	// Calculation of ivk from ask and nsk
	field ivk = mimc2([oldCommitment[0].ask, nsk[0]])
	bool[256] ivkBool = field_to_bool_256(ivk)
	field[2] pkd = scalarMult(ivkBool, g, context)

	// constrain input commitments to be from the same owner (ask)
	assert(oldCommitment[1].ask == oldCommitment[0].ask)
	// constrain new commitment 1 to be 'change'
	assert(newCommitment[1].pkdRecipient == pkd)

	//save values as fields (we know they can't overflow, so this is safe)
	field[2] valueOld = [u8_array_to_field(oldCommitment[0].value), u8_array_to_field(oldCommitment[1].value)]
	field[2] valueNew = [u8_array_to_field(newCommitment[0].value), u8_array_to_field(newCommitment[1].value)]

	// check the summation is correct
	assert(valueOld[0] + valueOld[1] == valueNew[0] + valueNew[1])
	// check the two old commitments relate to the same ERC contract
	assert(ercAddress[0] == ercAddress[1])
	// and are of the same type (they might not be for ERC1155)
	assert(oldCommitment[0].id == oldCommitment[1].id)
	// commitments can never be equal
	assert(newCommitmentHash[0] != newCommitmentHash[1])
	// nullifiers can never be equal
	assert(nullifier[0] != nullifier[1])

	// check the nullifiers are valid
	for u32 i in 0..2 do
		field nullifierCheck = poseidon([\
			nsk[i],\
			oldCommitment[i].hash\
		])
		assert(nullifierCheck == nullifier[i])
	endfor

	// check the new commitment for recipient is valid
	// firstly we need to pack the top four bytes of the TokenId into the address
	// these are all static values so we only need do it once.
	field idTop4Bytes = u32_array_to_field([oldCommitment[0].id[0]])
	field idRemainder = u32_array_to_field(oldCommitment[0].id[1..8])
	field packedErcAddress = ercAddress[0] + idTop4Bytes * SHIFT
	field newCommitmentCheck = poseidon([\
		packedErcAddress,\
		idRemainder,\
		valueNew[0],\
		...newCommitment[0].pkdRecipient,\
		newCommitment[0].salt\
	])
	assert(newCommitmentCheck == newCommitmentHash[0])

	// check the new commitment for sender is valid
	newCommitmentCheck = poseidon([\
		packedErcAddress,\
		idRemainder,\
		valueNew[1],\
		...pkd,\
		newCommitment[1].salt\
	])
	assert(newCommitmentCheck == newCommitmentHash[1])

	// check the old commitments are valid
	for u32 i in 0..2 do
		field oldCommitmentCheck = poseidon([\
			packedErcAddress,\
			idRemainder,\
			valueOld[i],\
			...pkd,\
			oldCommitment[i].salt\
		])
		assert(oldCommitmentCheck == oldCommitment[i].hash)
	endfor

	// check that the old commitments are in the merkle tree
	for u32 i in 0..2 do
		field mimcHash = oldCommitment[i].hash
		assert(pathCheck([root[i], ...path[i]], order[i], mimcHash))
	endfor

	// And the encryption of the transaction
	assert(secrets.cipherText == enc4(packedErcAddress, idRemainder, valueNew[0], newCommitment[0].salt, newCommitment[0].pkdRecipient, secrets.ephemeralKey1, secrets.ephemeralKey2, secrets.ephemeralKey3, secrets.ephemeralKey4, secrets.sqrtMessage1, secrets.sqrtMessage2, secrets.sqrtMessage3, secrets.sqrtMessage4))

	// check the compressed cipherText
	// we pass in 8x compressed points rather than 16x uncompressed points to save time / gas
	for u32 i in 0..8 do
		// these intermediate vars really speed up compile time
		// there is likely a compiler bug with zokrates 0.6.4 which makes using spreads (e.g. [8..256]) inside a function (e.g. assert()) very slow
		u32 j = 2*i
		bool[256] compressed256 = edwardsCompress([secrets.cipherText[j], secrets.cipherText[j+1]])
		bool parity = compressedCipherText[i].parity
		bool[256] ordinate = field_to_bool_256(compressedCipherText[i].ordinate)
		bool[256] compressedCheck256 = [ parity, ...ordinate[1..256] ]
		assert(compressed256 == compressedCheck256)
	endfor

	return
