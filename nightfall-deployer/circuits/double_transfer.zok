from "ecc/babyjubjubParams" import BabyJubJubParams
from "ecc/babyjubjubParams" import main as curveParams
from "ecc/edwardsScalarMult" import main as scalarMult
from "ecc/edwardsCompress" import main as edwardsCompress
from "./common/encryption/el-gamal4" import main as enc4

from "utils/casts/u32_8_to_bool_256.zok" import main as u32_8_to_bool_256
from "utils/casts/bool_256_to_u32_8.zok" import main as bool_256_to_u32_8
from "utils/pack/bool/pack256.zok" import main as bool_256_to_field
from "utils/pack/bool/nonStrictUnpack256.zok" import main as field_to_bool_256
from "utils/pack/u32/pack256.zok" import main as u32_8_to_field
from "utils/pack/u32/nonStrictUnpack256.zok" import main as field_to_u32_8

from "./common/hashes/mimc/mimc-hash-2.zok" import main as mimc2
from "./common/hashes/sha256/pad512ThenHash.zok" import main as sha256of512
from "./common/hashes/sha256/pad1280ThenHash.zok" import main as sha256of1280
from "./common/hashes/sha256/pad4096ThenHash.zok" import main as sha256of4096

from "./common/merkle-tree/mimc-path-check.zok" import main as pathCheck

struct OldCommitment {
	u32[8] ercAddress
	u32[8] id
	u32[8] value
	u32[8] salt
	u32[8] hash
	field ask
}

struct NewCommitment {
	field[2] pkdRecipient
	u32[8] value
	u32[8] salt
	u32[8] hash
}

struct Nullifier {
	u32[8] nsk
	u32[8] hash
}

struct Secrets {
	u32[8] ephemeralKey1
	u32[8] ephemeralKey2
	u32[8] ephemeralKey3
	u32[8] ephemeralKey4
	field[16] cipherText
	field sqrtMessage1
	field sqrtMessage2
	field sqrtMessage3
	field sqrtMessage4
}

def main(\
	field publicInputsHash,\
	private OldCommitment[2] oldCommitment,\
	private NewCommitment[2] newCommitment,\
	private Nullifier[2] nullifier,\
	private field[2][33] path,\
	private field[2] order,\
	private Secrets secrets\
)->():

	BabyJubJubParams context = curveParams()
	field[2] g = [context.Gu, context.Gv]

	// Calculation of ivk from ask and nsk
	field nsk = u32_8_to_field(nullifier[0].nsk)
	field ivk = mimc2([oldCommitment[0].ask, nsk])
	bool[256] ivkBool = field_to_bool_256(ivk)
	field[2] pkd = scalarMult(ivkBool, g, context)
	bool[256] nskBool = u32_8_to_bool_256(nullifier[0].nsk)
	bool[256] pkdBool = edwardsCompress(pkd)
	u32[8] pkdU32 = bool_256_to_u32_8(pkdBool)

	assert(oldCommitment[1].ask == oldCommitment[0].ask)

	// Convert (x,y) public key of recipient to a single element using Edwards compress
	// Recipient (x,y) form public key is used for encryption input while single element
	// is used for commitment inputs
	bool[256] pkdRecipientBool = edwardsCompress(newCommitment[0].pkdRecipient)
	u32[8] pkdRecipientU32 = bool_256_to_u32_8(pkdRecipientBool)
	assert(newCommitment[1].pkdRecipient == pkd)

	// Check the commitment value will not overflow we do this by only allowing
	// the value to be <224 bits (Most Significant U32 = 0). TODO is it worth
	// passing it in, should we allow more than 224 bits, might be a bit more
	// efficient?
	assert(0 == if oldCommitment[0].value[0] == 0x00000000 then 0 else 1 fi)
	assert(0 == if oldCommitment[1].value[0] == 0x00000000 then 0 else 1 fi)
	assert(0 == if newCommitment[0].value[0] == 0x00000000 then 0 else 1 fi)
	assert(0 == if newCommitment[1].value[0] == 0x00000000 then 0 else 1 fi)

	// check the summation is correct
	assert(\
		u32_8_to_field(oldCommitment[0].value) +\
		u32_8_to_field(oldCommitment[1].value) ==\
		u32_8_to_field(newCommitment[0].value) +\
		u32_8_to_field(newCommitment[1].value)\
	)

	// check the two old commitments relate to the same ERC contract
	assert(oldCommitment[0].ercAddress == oldCommitment[1].ercAddress)
	// and are of the same type (they might not be for ERC1155)
	assert(oldCommitment[0].id == oldCommitment[1].id)
	// commitments can never be equal
	assert(newCommitment[0].hash != newCommitment[1].hash)
	// nullifiers can never be equal
	assert(nullifier[0].hash != nullifier[1].hash)

	// check the nullifiers are valid
	for field i in 0..2 do
		u32[8] sha = sha256of512([\
			...nullifier[i].nsk,\
			...oldCommitment[i].hash\
		])
		assert(sha == nullifier[i].hash)
	endfor

	// check the new commitment for recipient is valid
	u32[8] sha = sha256of1280([\
		...oldCommitment[0].ercAddress,\
		...oldCommitment[0].id,\
		...newCommitment[0].value,\
		...pkdRecipientU32,\
		...newCommitment[0].salt\
	])
	assert(sha == newCommitment[0].hash )

	// check the new commitment for sender is valid
	sha = sha256of1280([\
		...oldCommitment[1].ercAddress,\
		...oldCommitment[1].id,\
		...newCommitment[1].value,\
		...pkdU32,\
		...newCommitment[1].salt\
	])
	assert(sha == newCommitment[1].hash )

	// check the old commitments are valid
	for field i in 0..2 do
		sha = sha256of1280([\
			...oldCommitment[i].ercAddress,\
			...oldCommitment[i].id,\
			...oldCommitment[i].value,\
			...pkdU32,\
			...oldCommitment[i].salt\
		])
		assert(sha == oldCommitment[i].hash)
	endfor

	// And the encryption of the transaction (extend the value up to 256 bits)
	assert(secrets.cipherText == enc4(oldCommitment[0].ercAddress, oldCommitment[0].id, newCommitment[0].value, newCommitment[0].salt, newCommitment[0].pkdRecipient, secrets.ephemeralKey1, secrets.ephemeralKey2, secrets.ephemeralKey3, secrets.ephemeralKey4, secrets.sqrtMessage1, secrets.sqrtMessage2, secrets.sqrtMessage3, secrets.sqrtMessage4))

	// check the public input hash
	// To make the hash smaller, let's 'compress' each curve point ordered pair into a single 256 bit array (rather than two)...
	bool[256] compressedSecretsBool1 = edwardsCompress(secrets.cipherText[0..2])
	bool[256] compressedSecretsBool2 = edwardsCompress(secrets.cipherText[2..4])
	bool[256] compressedSecretsBool3 = edwardsCompress(secrets.cipherText[4..6])
	bool[256] compressedSecretsBool4 = edwardsCompress(secrets.cipherText[6..8])
	bool[256] compressedSecretsBool5 = edwardsCompress(secrets.cipherText[8..10])
	bool[256] compressedSecretsBool6 = edwardsCompress(secrets.cipherText[10..12])
	bool[256] compressedSecretsBool7 = edwardsCompress(secrets.cipherText[12..14])
	bool[256] compressedSecretsBool8 = edwardsCompress(secrets.cipherText[14..16])

	u32[8] compressedSecret1 = bool_256_to_u32_8(compressedSecretsBool1)
  	u32[8] compressedSecret2 = bool_256_to_u32_8(compressedSecretsBool2)
	u32[8] compressedSecret3 = bool_256_to_u32_8(compressedSecretsBool3)
	u32[8] compressedSecret4 = bool_256_to_u32_8(compressedSecretsBool4)
	u32[8] compressedSecret5 = bool_256_to_u32_8(compressedSecretsBool5)
	u32[8] compressedSecret6 = bool_256_to_u32_8(compressedSecretsBool6)
	u32[8] compressedSecret7 = bool_256_to_u32_8(compressedSecretsBool7)
	u32[8] compressedSecret8 = bool_256_to_u32_8(compressedSecretsBool8)

	// check the public input hash (TODO no need to include both ERCAddresses as
	// they are proven equal) so we can save 25k constraints
	u32[8] publicInputsHashU32 = sha256of4096([\
		...oldCommitment[0].ercAddress,\
		...oldCommitment[1].ercAddress,\
		...newCommitment[0].hash,\
		...newCommitment[1].hash,\
		...nullifier[0].hash,\
		...nullifier[1].hash,\
		...field_to_u32_8(path[0][0]),\
		...field_to_u32_8(path[1][0]),\
		...compressedSecret1,\
		...compressedSecret2,\
		...compressedSecret3,\
		...compressedSecret4,\
		...compressedSecret5,\
		...compressedSecret6,\
		...compressedSecret7,\
		...compressedSecret8\
	])
	bool[256] publicInputsHashBool256 = u32_8_to_bool_256(publicInputsHashU32)
	bool[256] publicInputsHashBool256Sliced = [\
	     ...[false; 8],\
	     ...publicInputsHashBool256[8..256]\
	]
	assert(publicInputsHash == bool_256_to_field(publicInputsHashBool256Sliced))

	// check that the old commitments are in the merkle tree
	for field i in 0..2 do
		field mimcHash = u32_8_to_field(oldCommitment[i].hash)
		assert(pathCheck(path[i], order[i], mimcHash))
	endfor

	return
