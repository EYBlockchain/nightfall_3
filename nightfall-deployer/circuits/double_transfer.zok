from "ecc/babyjubjubParams" import BabyJubJubParams
from "ecc/babyjubjubParams" import main as curveParams
from "ecc/edwardsScalarMult" import main as scalarMult
from "ecc/edwardsCompress" import main as edwardsCompress
from "./common/encryption/kem-dem.zok" import main as kemDem, EncryptedMsgs

from "utils/casts/u32_8_to_bool_256.zok" import main as u32_8_to_bool_256
from "utils/pack/bool/nonStrictUnpack256.zok" import main as field_to_bool_256
from "./common/casts/u8_array_to_field.zok" import main as u8_array_to_field
from "./common/casts/u32_array_to_field.zok" import main as u32_array_to_field

from "hashes/poseidon/poseidon.zok" import main as poseidon
from "./common/merkle-tree/path-check.zok" import main as pathCheck

type Point = field[2]

// 2 ^ 161
const field SHIFT = 1461501637330902918203684832716283019655932542976

struct OldCommitmentPreimage {
	u32[8] id
	u8[31] value
	field salt
	field hash
	field rootKey
}

struct NewCommitmentPreimage {
	Point zkpPublicKeyRecipient
	u8[31] value
	field salt
}

struct CompressedPoint {
	bool parity
	field ordinate
}

def main(\
	private field[2] ercAddress,\
	private OldCommitmentPreimage[2] oldCommitment,\
	private NewCommitmentPreimage[2] newCommitment,\
	field[2] newCommitmentHash,\
	field[2] nullifier,\
	field[2] root,\
	private field[2][32] path,\
	private field[2] order,\
	private u32[8] ephemeralKey,\
	CompressedPoint compressedEphemeralPublicKey,\
	field[4] cipherText\
)->():

	BabyJubJubParams context = curveParams()
	field[2] g = [context.Gu, context.Gv]

	// The domain numbers are derived thusly:
	// keccak256('zkpPrivateKey') % BN128_GROUP_ORDER 2708019456231621178814538244712057499818649907582893776052749473028258908910
	// keccak256('nullifierKey') % BN128_GROUP_ORDER 7805187439118198468809896822299973897593108379494079213870562208229492109015

	// Calculation of zkpPrivateKey and nullifierKey from rootKey
	field[2] zkpPrivateKey = [\
		poseidon([oldCommitment[0].rootKey, 2708019456231621178814538244712057499818649907582893776052749473028258908910]),\
		poseidon([oldCommitment[1].rootKey, 2708019456231621178814538244712057499818649907582893776052749473028258908910])\
	]
	field[2] nullifierKey = [\
		poseidon([oldCommitment[0].rootKey, 7805187439118198468809896822299973897593108379494079213870562208229492109015]),\
		poseidon([oldCommitment[1].rootKey, 7805187439118198468809896822299973897593108379494079213870562208229492109015])\
	]
	bool[2][256] zkpPrivateKeyBool = [field_to_bool_256(zkpPrivateKey[0]), field_to_bool_256(zkpPrivateKey[1])]
	field[2][2] zkpPublicKey = [scalarMult(zkpPrivateKeyBool[0], g, context), scalarMult(zkpPrivateKeyBool[1], g, context)]

	// constrain new commitment 1 to be 'change'
	assert(newCommitment[1].zkpPublicKeyRecipient == zkpPublicKey[0])

	//save values as fields (we know they can't overflow, so this is safe)
	field[2] valueOld = [u8_array_to_field(oldCommitment[0].value), u8_array_to_field(oldCommitment[1].value)]
	field[2] valueNew = [u8_array_to_field(newCommitment[0].value), u8_array_to_field(newCommitment[1].value)]

	// check the summation is correct
	assert(valueOld[0] + valueOld[1] == valueNew[0] + valueNew[1])
	// check the two old commitments relate to the same ERC contract
	assert(ercAddress[0] == ercAddress[1])
	// and are of the same type (they might not be for ERC1155)
	assert(oldCommitment[0].id == oldCommitment[1].id)
	// commitments can never be equal
	assert(newCommitmentHash[0] != newCommitmentHash[1])
	// nullifiers can never be equal
	assert(nullifier[0] != nullifier[1])

	// check the nullifiers are valid
	for u32 i in 0..2 do
		field nullifierCheck = poseidon([\
			nullifierKey[i],\
			oldCommitment[i].hash\
		])
		assert(nullifierCheck == nullifier[i])
	endfor

	// check the new commitment for recipient is valid
	// firstly we need to pack the top four bytes of the TokenId into the address
	// these are all static values so we only need do it once.
	field idTop4Bytes = u32_array_to_field([oldCommitment[0].id[0]])
	field idRemainder = u32_array_to_field(oldCommitment[0].id[1..8])
	field packedErcAddress = ercAddress[0] + idTop4Bytes * SHIFT
	field newCommitmentCheck = poseidon([\
		packedErcAddress,\
		idRemainder,\
		valueNew[0],\
		...newCommitment[0].zkpPublicKeyRecipient,\
		newCommitment[0].salt\
	])
	assert(newCommitmentCheck == newCommitmentHash[0])

	// check the new commitment for sender is valid
	newCommitmentCheck = poseidon([\
		packedErcAddress,\
		idRemainder,\
		valueNew[1],\
		...zkpPublicKey[0],\
		newCommitment[1].salt\
	])
	assert(newCommitmentCheck == newCommitmentHash[1])

	// check the old commitments are valid
	for u32 i in 0..2 do
		field oldCommitmentCheck = poseidon([\
			packedErcAddress,\
			idRemainder,\
			valueOld[i],\
			...zkpPublicKey[i],\
			oldCommitment[i].salt\
		])
		assert(oldCommitmentCheck == oldCommitment[i].hash)
	endfor

	// check that the old commitments are in the merkle tree
	for u32 i in 0..2 do
		field mimcHash = oldCommitment[i].hash
		assert(pathCheck([root[i], ...path[i]], order[i], mimcHash))
	endfor

	// KEM-DEM Encryption
	bool[256] bitEphemeralKey = u32_8_to_bool_256(ephemeralKey)

	field[4] plainTexts = [\
		packedErcAddress,\
		idRemainder,\
		valueNew[0],\
		newCommitment[0].salt\
	]
	EncryptedMsgs<4> enc = kemDem(bitEphemeralKey, newCommitment[0].zkpPublicKeyRecipient, plainTexts)
	assert(cipherText == enc.cipherText)

	bool[256] compressedPubKeyOutput = edwardsCompress(enc.ephemeralPublicKey)
	bool parity = compressedEphemeralPublicKey.parity
	bool[256] ordinate = field_to_bool_256(compressedEphemeralPublicKey.ordinate)
	bool[256] compressedCheck256 = [ parity, ...ordinate[1..256] ]
	assert(compressedPubKeyOutput == compressedCheck256)

	return
