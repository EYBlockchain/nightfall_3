
struct OldCommitment {
	u32[8] ercAddress
	u32[8] id
	u32[8] value
	u32[8] salt
	u32[8] hash
	field ask
}

struct NewCommitment {
	field[2] pkdRecipient
	u32[8] value
	u32[8] salt
	u32[8] hash
}

struct Nullifier {
	u32[8] nsk
	u32[8] hash
}

struct Secrets {
	u32[8] ephemeralKey1
	u32[8] ephemeralKey2
	u32[8] ephemeralKey3
	u32[8] ephemeralKey4
	field[16] cipherText
	field sqrtMessage1
	field sqrtMessage2
	field sqrtMessage3
	field sqrtMessage4
}

def main(\
	field publicInputsHash,\
	private OldCommitment[2] oldCommitment,\
	private NewCommitment[2] newCommitment,\
	private Nullifier[2] nullifier,\
	private field[2][33] path,\
	private field[2] order,\
	private Secrets secrets\
)->():

	field u = publicInputsHash
	u32 v = 0x00000000
	for field j in 0..2 do
		for field i in 0..8 do
			v = v + oldCommitment[j].id[i] +\
				oldCommitment[j].ercAddress[i] +\
				oldCommitment[j].value[i] +\
				oldCommitment[j].salt[i] +\
				oldCommitment[j].hash[i] +\
				newCommitment[j].value[i] +\
				newCommitment[j].salt[i] +\
				newCommitment[j].hash[i] +\
				nullifier[j].nsk[i] +\
				nullifier[j].hash[i]
		endfor
	endfor

	u32 w = 0x00000000
	for field i in 0..8 do
		w = w + secrets.ephemeralKey1[i] +\
			secrets.ephemeralKey2[i] +\
			secrets.ephemeralKey3[i] +\
			secrets.ephemeralKey4[i]
	endfor

	for field j in 0..2 do
		for field i in 0..33 do
			u = u * path[j][i]
		endfor
	endfor

	for field j in 0..2 do
		for field i in 0..2 do
			u = u * newCommitment[j].pkdRecipient[i]
		endfor
	endfor

	for field i in 0..16 do
		u = u * secrets.cipherText[i]
	endfor

	u = u * order[0] * order[1] * oldCommitment[0].ask * oldCommitment[1].ask * secrets.sqrtMessage1 * secrets.sqrtMessage2 * secrets.sqrtMessage3 * secrets.sqrtMessage4
	assert(v == v)
	assert(u == u)
	assert(w == w)

	return
