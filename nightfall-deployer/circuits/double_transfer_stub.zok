type Point = field[2]

struct OldCommitmentPreimage {
	u32[8] id
	u8[31] value
	field salt
	field hash
	field rootKey
}

struct NewCommitmentPreimage {
	Point zkpPublicKeyRecipient
	u8[31] value
	field salt
}

struct CompressedPoint {
	bool parity
	field ordinate
}

def main(\
	private field[2] ercAddress,\
	private OldCommitmentPreimage[2] oldCommitment,\
	private NewCommitmentPreimage[2] newCommitment,\
	field[2] newCommitmentHash,\
	field[2] nullifier,\
	field[2] root,\
	private field[2][32] path,\
	private field[2] order,\
	private u32[8] ephemeralKey,\
	CompressedPoint compressedEphemeralPublicKey,\
	field[4] cipherText\
)->():

	field u = 0
	u32 v = 0
	u8 w = 0
	for u32 i in 0..2 do
		u = ercAddress[i] + oldCommitment[i].salt + oldCommitment[i].hash + newCommitment[i].salt + newCommitment[i].zkpPublicKeyRecipient[0] + newCommitment[i].zkpPublicKeyRecipient[1] + nullifier[i] + root[i] + order[i] + oldCommitment[i].rootKey
		for u32 j in 0..32 do
			u = u * path[i][j]
		endfor
		v = oldCommitment[i].id[0] * oldCommitment[i].id[1] + oldCommitment[i].id[2] + oldCommitment[i].id[3] + oldCommitment[i].id[4] + oldCommitment[i].id[5] + oldCommitment[i].id[6] * oldCommitment[i].id[7]
		for u32 j in 0..31 do
			w = w + newCommitment[i].value[j]
		endfor
	endfor


	assert(u == u)
	assert(v == v)
	assert(w == w)

	return
