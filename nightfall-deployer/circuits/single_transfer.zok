from "ecc/babyjubjubParams" import BabyJubJubParams
from "ecc/babyjubjubParams" import main as curveParams
from "ecc/edwardsScalarMult" import main as scalarMult
from "ecc/edwardsCompress" import main as edwardsCompress
from "hashes/poseidon/poseidon.zok" import main as poseidon
from "./common/encryption/kem-dem" import main as kemDem, EncryptedMsgs

from "utils/casts/u32_8_to_bool_256.zok" import main as u32_8_to_bool_256
from "utils/pack/bool/nonStrictUnpack256.zok" import main as field_to_bool_256

from "./common/hashes/mimc/mimc-hash-2.zok" import main as mimc2
from "./common/merkle-tree/mimc-path-check.zok" import main as pathCheck
from "./common/casts/u8_array_to_field.zok" import main as u8_array_to_field
from "./common/casts/u32_array_to_field.zok" import main as u32_array_to_field

type Point = field[2]

// 2 ^ 161
const field SHIFT = 2923003274661805836407369665432566039311865085952

struct OldCommitmentPreimage {
	u32[8] id
	u8[31] value // needed to prevent overflow attacks in transfers
	field salt
	field hash
	field rootKey
}

struct NewCommitmentPreimage {
	Point zkpPublicKeyRecipient
	u8[31] value
	field salt
}

struct CompressedPoint {
	bool parity
	field ordinate
}

def main(\
	private field ercAddress,\
	private OldCommitmentPreimage oldCommitment,\
	private NewCommitmentPreimage newCommitment,\
	field newCommitmentHash,\
	field nullifier,\
	field root,\
	private field[32] path,\
	private field order,\
	private u32[8] ephemeralKey,\
	CompressedPoint compressedEphemeralPublicKey,\
	field[4] cipherText\
)->():

	BabyJubJubParams context = curveParams()
	field[2] g = [context.Gu, context.Gv]

	// Calculation of zkpPrivateKey and nullifierKey from rootKey
	field zkpPrivateKey = mimc2([oldCommitment.rootKey, 2708019456231621178814538244712057499818649907582893776052749473028258908910])
	field nullifierKey = mimc2([oldCommitment.rootKey, 7805187439118198468809896822299973897593108379494079213870562208229492109015])
	bool[256] zkpPrivateKeyBool = field_to_bool_256(zkpPrivateKey)
	field[2] zkpPublicKey = scalarMult(zkpPrivateKeyBool, g, context)

	// check the nullifier is valid
	field nullifierCheck = poseidon([nullifierKey, oldCommitment.hash])
	assert (nullifierCheck == nullifier)

	// check the new commitment is valid
	// we effectively throw away the value of the new commitment by insisting
	// that it is equal to the old commitment value for a single-token transfer
	// This is a little inefficient but makes the witness computation in node
	// independent of how many commitments are being transformed.
	assert(newCommitment.value == oldCommitment.value)
	field value = u8_array_to_field(oldCommitment.value)
	// pack the top four bytes of the token id into the ercAddress field (address only
	// uses 160 bits and the Shield contract prevents creation of something with more than 160 bits)
	field idTop4Bytes = u32_array_to_field([oldCommitment.id[0]])
	field idRemainder = u32_array_to_field(oldCommitment.id[1..8])
	field packedErcAddress = ercAddress + idTop4Bytes * SHIFT

	field newCommitmentCheck = poseidon([\
		packedErcAddress,\
		idRemainder,\
		value,\
		...newCommitment.zkpPublicKeyRecipient,\
		newCommitment.salt\
	])
	assert (newCommitmentCheck == newCommitmentHash)

	// check the old commitment is valid
	field oldCommitmentCheck = poseidon([\
		packedErcAddress,\
		idRemainder,\
		value,\
		...zkpPublicKey,\
		oldCommitment.salt\
	])
	assert(oldCommitmentCheck == oldCommitment.hash)

	// check that the old commitment is in the merkle tree (path[0] should be the root)
	field mimcHash = oldCommitment.hash
	bool x = pathCheck([root, ...path], order, mimcHash)
	assert(x)

	// KEM-DEM Encryption
	bool[256] bitEphemeralKey = u32_8_to_bool_256(ephemeralKey)

	field[4] plainTexts = [\
		packedErcAddress,\
		idRemainder,\
		value,\
		newCommitment.salt\
	]

	EncryptedMsgs<4> enc = kemDem(bitEphemeralKey, newCommitment.zkpPublicKeyRecipient, plainTexts)
	assert(cipherText == enc.cipherText)

	bool[256] compressedPubKeyOutput = edwardsCompress(enc.ephemeralPublicKey)
	bool parity = compressedEphemeralPublicKey.parity
	bool[256] ordinate = field_to_bool_256(compressedEphemeralPublicKey.ordinate)
	bool[256] compressedCheck256 = [ parity, ...ordinate[1..256] ]
	assert(compressedPubKeyOutput == compressedCheck256)

	return
