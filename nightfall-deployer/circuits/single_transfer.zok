from "ecc/babyjubjubParams" import BabyJubJubParams
from "ecc/babyjubjubParams" import main as curveParams
from "ecc/edwardsScalarMult" import main as scalarMult
from "ecc/edwardsCompress" import main as edwardsCompress
from "./common/encryption/el-gamal4" import main as enc4

from "utils/casts/u32_to_bits.zok" import main as u32_to_bool_32
from "utils/casts/bool_256_to_u32_8.zok" import main as bool_256_to_u32_8
from "utils/pack/bool/nonStrictUnpack256.zok" import main as field_to_bool_256
from "utils/pack/u32/pack256.zok" import main as u32_8_to_field
from "utils/pack/u32/nonStrictUnpack256.zok" import main as field_to_u32_8

from "./common/hashes/mimc/mimc-hash-2.zok" import main as mimc2
from "./common/hashes/sha256/pad512ThenHash.zok" import main as sha256of512
from "./common/hashes/sha256/pad1280ThenHash.zok" import main as sha256of1280

from "./common/merkle-tree/mimc-path-check.zok" import main as pathCheck

struct OldCommitmentPreimage {
	u32[8] id
	u32[8] value
	u32[8] salt
	u32[8] hash
	field rootKey
}

struct NewCommitmentPreimage {
	field[2] zkpPublicKeyRecipient
	u32[8] value
	u32[8] salt
}

struct Secrets {
	u32[8] ephemeralKey1
	u32[8] ephemeralKey2
	u32[8] ephemeralKey3
	u32[8] ephemeralKey4
	field[16] cipherText
	field sqrtMessage1
	field sqrtMessage2
	field sqrtMessage3
	field sqrtMessage4
}

struct CompressedPoint {
	bool parity
	field ordinate
}

def main(\
	private field fErcAddress,\
	private OldCommitmentPreimage oldCommitment,\
	private NewCommitmentPreimage newCommitment,\
	field fNewCommitmentHash,\
	field fNullifier,\
	field root,\
	private field[32] path,\
	private field order,\
	private Secrets secrets,\
	CompressedPoint[8] compressedCipherText\
)->():

	BabyJubJubParams context = curveParams()
	field[2] g = [context.Gu, context.Gv]

	// Calculation of zkpPrivateKey and nullifierKey from rootKey
	field zkpPrivateKey = mimc2([oldCommitment.rootKey, 2708019456231621178814538244712057499818649907582893776052749473028258908910])
	field nullifierKey = mimc2([oldCommitment.rootKey, 7805187439118198468809896822299973897593108379494079213870562208229492109015])
	u32[8] nullifierKeyU328 = field_to_u32_8(nullifierKey)

	bool[256] zkpPrivateKeyBool = field_to_bool_256(zkpPrivateKey)
	field[2] zkpPublicKey = scalarMult(zkpPrivateKeyBool, g, context)
	bool[256] zkpPublicKeyBool = edwardsCompress(zkpPublicKey)
	u32[8] zkpPublicKeyU32 = bool_256_to_u32_8(zkpPublicKeyBool)

	u32[8] ercAddress = field_to_u32_8(fErcAddress)
	u32[8] newCommitmentHash = field_to_u32_8(fNewCommitmentHash)
	u32[8] nullifier = field_to_u32_8(fNullifier)
	// Convert (x,y) public key of recipient to a single element using Edwards compress
	// Recipient (x,y) form public key is used for encryption input while single element
	// is used for commitment inputs
	bool[256] zkpPublicKeyRecipientBool = edwardsCompress(newCommitment.zkpPublicKeyRecipient)
    u32[8] zkpPublicKeyRecipientU32 = bool_256_to_u32_8(zkpPublicKeyRecipientBool)

	// check the nullifier is valid
	u32[8] sha = sha256of512([\
		...nullifierKeyU328,\
		...oldCommitment.hash\
	])
	// nullifiers are truncated to 248 bits since they are public inputs
	// so we must check the 248 bits while minimising constraints/comp time - casting to bool[256] is a slower operation than comparing u32s

	// last 224 bits:
	assert(sha[1..8] == nullifier[1..8])
	// first 24 bits:
	assert(u32_to_bool_32(sha[0])[8..32] == u32_to_bool_32(nullifier[0])[8..32])

	// check the new commitment is valid
	// we effectively throw away the value of the new commitment by insisting
	// that it is equal to the old commitment value for a single-token transfer
	// This is a little inefficient but makes the witness computation in node
	// independent of how many commitments are being transformed.
	sha = sha256of1280([\
		...ercAddress,\
		...oldCommitment.id,\
		...oldCommitment.value,\
		...zkpPublicKeyRecipientU32,\
		...newCommitment.salt\
	])
	// new commitments are truncated to 248 bits since they are public inputs
	// so we must check the 248 bits while minimising constraints/comp time - casting to bool[256] is a slower operation than comparing u32s

	// last 224 bits:
	assert(sha[1..8] == newCommitmentHash[1..8])
	// first 24 bits:
	assert(u32_to_bool_32(sha[0])[8..32] == u32_to_bool_32(newCommitmentHash[0])[8..32])

	// check the old commitment is valid
	sha = sha256of1280([\
		...ercAddress,\
		...oldCommitment.id,\
		...oldCommitment.value,\
		...zkpPublicKeyU32,\
		...oldCommitment.salt\
	])
	// assert(sha == oldCommitment.hash)
	// last 224 bits:
	assert(sha[1..8] == oldCommitment.hash[1..8])
	// first 24 bits:
	assert(u32_to_bool_32(sha[0])[8..32] == u32_to_bool_32(oldCommitment.hash[0])[8..32])

	// And the encryption of the transaction (extend the value up to 256 bits)
	assert(secrets.cipherText == enc4(ercAddress, oldCommitment.id, oldCommitment.value, newCommitment.salt, newCommitment.zkpPublicKeyRecipient, secrets.ephemeralKey1, secrets.ephemeralKey2, secrets.ephemeralKey3, secrets.ephemeralKey4, secrets.sqrtMessage1, secrets.sqrtMessage2, secrets.sqrtMessage3, secrets.sqrtMessage4))

	// check the compressed cipherText
	// we pass in 8x compressed points rather than 16x uncompressed points to save time / gas
	for u32 i in 0..8 do
		// these intermediate vars really speed up compile time
		// there is likely a compiler bug with zokrates 0.6.4 which makes using spreads (e.g. [8..256]) inside a function (e.g. assert()) very slow
		u32 j = 2*i
		bool[256] compressed256 = edwardsCompress([secrets.cipherText[j], secrets.cipherText[j+1]])
		bool parity = compressedCipherText[i].parity
		bool[256] ordinate = field_to_bool_256(compressedCipherText[i].ordinate)
		bool[256] compressedCheck256 = [ parity, ...ordinate[1..256] ]
		assert(compressed256 == compressedCheck256)
	endfor

	// check that the old commitment is in the merkle tree (path[0] should be the root)
	field mimcHash = u32_8_to_field(oldCommitment.hash)
	bool x = pathCheck([root, ...path], order, mimcHash)
	assert(x)

	return
