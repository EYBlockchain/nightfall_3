version: '3.5'
# Use this script for making an adversary service
services:
  adversary:
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    build:
      dockerfile: docker/optimist.Dockerfile
      context: ..
    depends_on:
      - mongodb-adversary
    networks:
      - nightfall_network
    ports:
      - 8088:80
      # websocket port for adversary is on localhost:8082
      - 8089:8080
    volumes:
      - type: volume
        source: build
        target: /app/build/
      - type: bind
        source: ../test/adversary/nightfall-adversary/src
        target: /app/src
      - type: bind
        source: ../common-files
        target: /common-files
      - type: bind
        source: ../config/default.js
        target: /app/config/default.js
    environment:
      ENVIRONMENT: ${ENVIRONMENT:-localhost}
      WEBSOCKET_PORT: ${WEBSOCKET_PORT:-8080}
      BLOCKCHAIN_WS_HOST: ${BLOCKCHAIN_WS_HOST:-host.docker.internal}
      BLOCKCHAIN_PORT: ${BLOCKCHAIN_PORT:-8546}
      MONGO_URL: ${MONGO_URL:-mongodb://mongodb-adversary:27017}
      HASH_TYPE: poseidon
      LOG_LEVEL: ${LOG_LEVEL:-debug}
      LOG_HTTP_PAYLOAD_ENABLED: ${LOG_HTTP_PAYLOAD_ENABLED:-true}
      LOG_HTTP_FULL_DATA: ${LOG_HTTP_FULL_DATA:-false}
      # we don't want adversary who create bad block to be challenger as well
      # so for adversary default is false unlike optimist
      IS_CHALLENGER: ${IS_CHALLENGER:-false}
      NONSTOP_QUEUE_AFTER_INVALID_BLOCK: 'false'
      TRANSACTIONS_PER_BLOCK: ${TRANSACTIONS_PER_BLOCK:-2}
      AUTOSTART_RETRIES: ${AUTOSTART_RETRIES:-100}
      BAD_BLOCK_SEQUENCE: ${BAD_BLOCK_SEQUENCE}
      BAD_TX_SEQUENCE: ${BAD_TX_SEQUENCE}
    command: ['npm', 'run', 'dev']

  mongodb-adversary:
    image: mongo:4.4.1-bionic
    hostname: mongodb-adversary
    # ports:
    #   - 27018:27017
    networks:
      - nightfall_network
    volumes:
      - type: volume
        source: mongodb-adversary-db
        target: /data/db


volumes:
  mongodb-adversary-db:
