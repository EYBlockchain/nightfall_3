struct OldCommitment {
	u32[8] ercAddress
	u32[8] id
	u32[8] value
	u32[8] salt
	u32[8] hash
	field ask
}

struct NewCommitment {
	field[2] pkdRecipient
	u32[8] value
	u32[8] salt
	u32[8] hash
}

struct Nullifier {
	u32[8] nsk
	u32[8] hash
}

struct Secrets {
	u32[8] ephemeralKey1
	u32[8] ephemeralKey2
	u32[8] ephemeralKey3
	u32[8] ephemeralKey4
	field[16] cipherText
	field sqrtMessage1
	field sqrtMessage2
	field sqrtMessage3
	field sqrtMessage4
}

def main(\
	field publicInputsHash,\
	private OldCommitment oldCommitment,\
	private NewCommitment newCommitment,\
	private Nullifier nullifier,\
	private field[33] path,\
	private field order,\
	private Secrets secrets\
)->():

	field u = publicInputsHash
	u32 v = 0x00000000
	for u32 i in 0..8 do
		v = v + oldCommitment.id[i] +\
			oldCommitment.ercAddress[i] +\
			oldCommitment.value[i] +\
			oldCommitment.salt[i] +\
			oldCommitment.hash[i] +\
			newCommitment.value[i] +\
			newCommitment.salt[i] +\
			newCommitment.hash[i] +\
			nullifier.nsk[i] +\
			nullifier.hash[i]
	endfor

	u32 w = 0x00000000
	for u32 i in 0..8 do
		w = w + secrets.ephemeralKey1[i] +\
			secrets.ephemeralKey2[i] +\
			secrets.ephemeralKey3[i] +\
			secrets.ephemeralKey4[i]
	endfor

	for u32 i in 0..33 do
		u = u * path[i]
	endfor

	for u32 i in 0..16 do
		u = u * secrets.cipherText[i]
	endfor

	u = u * order * oldCommitment.ask * newCommitment.pkdRecipient[0] * newCommitment.pkdRecipient[1] * secrets.sqrtMessage1 * secrets.sqrtMessage2 * secrets.sqrtMessage3 * secrets.sqrtMessage4
	assert(v == v)
	assert(u == u)
	assert(w == w)

	return
