#! /bin/bash

if [ -f client.env ]; then
  grep -v '^#' client.env
  # Export env vars
  export $(grep -v '^#' client.env | xargs)
else
  echo "client.env does not exist. You need to define the client.env with the needed variables to run the client."
  exit 1
fi

VOLUME_LIST=$(docker volume ls -q)
FILE="-f ../docker/compose/docker-compose.client.yml"

usage()
{
  echo "Usage:"
  echo "  -d or --dev; to bind mount the filesystem and use it for development"
  echo "  -r; to remove existing volumes for mongodb and abi contracts"
}

while [ -n "$1" ]; do
  case $1 in
      -d  | --dev )                 DEV="-f ../docker/compose/docker-compose.client.dev.yml"
                                    ;;
      -r )                          REMOVE_VOLUMES="true"
                                    ;;
      -h  | --help )                usage
                                    ;;
      * )                           usage
                              exit 1
    esac
  shift
done
# FILE should always be set.  Asking for -s on its own makes no sense
if [ -z "$FILE" ]; then
  usage
  exit 1
fi

if [ -n "$REMOVE_VOLUMES" ]; then
  # if-else block checks - volume exist and then removes it.
  if [[ $(echo $VOLUME_LIST | grep nightfall_3_mongodb1) ]]; then
    echo -n 'Removing '
    docker volume rm nightfall_3_mongodb1
  fi

  if [[ $(echo $VOLUME_LIST | grep nightfall_3_build) ]]; then
    echo -n 'Removing '
    docker volume rm nightfall_3_build
  fi
fi 

# shut down cleanly in the event of a cntl-c etc. We don't want to leave containers running
trap "docker-compose $FILE $DEV down --remove-orphans -t 1; exit 1" SIGHUP SIGINT SIGTERM

docker-compose $FILE $DEV down --remove-orphans

DIR=../common-files/node_modules
if [[ -d "$DIR" ]]; then
  rm -dr common-files/node_modules
fi

echo "docker-compose $FILE $DEV up -d --remove-orphans"
docker-compose $FILE $DEV up -d --remove-orphans
docker-compose logs -f