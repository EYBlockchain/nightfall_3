{
  "contractName": "MerkleTreeControllerMiMC",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "treeHeight",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "in_msgs",
          "type": "uint256[]"
        },
        {
          "name": "in_key",
          "type": "uint256"
        }
      ],
      "name": "Hash",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "leafIndex",
          "type": "uint256"
        }
      ],
      "name": "getFrontierSlot",
      "outputs": [
        {
          "name": "slot",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "in_msgs",
          "type": "bytes32[2]"
        }
      ],
      "name": "leafCount",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "in_msgs",
          "type": "bytes32[2]"
        }
      ],
      "name": "mimcHash2",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "leafValue",
          "type": "bytes32"
        }
      ],
      "name": "insertLeaf",
      "outputs": [
        {
          "name": "root",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "treeWidth",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "in_x",
          "type": "uint256"
        },
        {
          "name": "in_k",
          "type": "uint256"
        }
      ],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "in_x",
          "type": "uint256"
        },
        {
          "name": "in_k",
          "type": "uint256"
        }
      ],
      "name": "Encipher",
      "outputs": [
        {
          "name": "out_x",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "in_msgs",
          "type": "bytes32[]"
        }
      ],
      "name": "mimcHash",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "roots",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "leafValues",
          "type": "bytes32[]"
        }
      ],
      "name": "latestRoot",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "leafValues",
          "type": "bytes32[]"
        }
      ],
      "name": "insertLeaves",
      "outputs": [
        {
          "name": "root",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "leafIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "leafValue",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "root",
          "type": "bytes32"
        }
      ],
      "name": "NewLeaf",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "minLeafIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "leafValues",
          "type": "bytes32[]"
        },
        {
          "indexed": false,
          "name": "root",
          "type": "bytes32"
        }
      ],
      "name": "NewLeaves",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "leafValue",
          "type": "bytes32"
        }
      ],
      "name": "_insertLeaf",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "leafValues",
          "type": "bytes32[]"
        }
      ],
      "name": "_insertLeaves",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.8+commit.23d335f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"treeHeight\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"leafValues\",\"type\":\"bytes32[]\"}],\"name\":\"_insertLeaves\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"in_msgs\",\"type\":\"uint256[]\"},{\"name\":\"in_key\",\"type\":\"uint256\"}],\"name\":\"Hash\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"leafIndex\",\"type\":\"uint256\"}],\"name\":\"getFrontierSlot\",\"outputs\":[{\"name\":\"slot\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"leafCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"in_msgs\",\"type\":\"bytes32[2]\"}],\"name\":\"mimcHash2\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"leafValue\",\"type\":\"bytes32\"}],\"name\":\"insertLeaf\",\"outputs\":[{\"name\":\"root\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"leafValue\",\"type\":\"bytes32\"}],\"name\":\"_insertLeaf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treeWidth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"in_x\",\"type\":\"uint256\"},{\"name\":\"in_k\",\"type\":\"uint256\"}],\"name\":\"Encipher\",\"outputs\":[{\"name\":\"out_x\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"in_msgs\",\"type\":\"bytes32[]\"}],\"name\":\"mimcHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"roots\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestRoot\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"leafValues\",\"type\":\"bytes32[]\"}],\"name\":\"insertLeaves\",\"outputs\":[{\"name\":\"root\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"leafIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"leafValue\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"NewLeaf\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"minLeafIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"leafValues\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"NewLeaves\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"_insertLeaf(bytes32)\":{\"params\":{\"leafValue\":\"- the value of the leaf being inserted.\"}},\"_insertLeaves(bytes32[])\":{\"params\":{\"leafValues\":\"- the values of the leaves being inserted.\"}},\"getFrontierSlot(uint256)\":{\"return\":\"uint - the index of the frontier (or 'storage slot') into which we will next store a nodeValue\"},\"insertLeaf(bytes32)\":{\"params\":{\"leafValue\":\"- the value of the leaf being inserted.\"},\"return\":\"bytes32 - the root of the merkle tree, after the insert.\"},\"insertLeaves(bytes32[])\":{\"params\":{\"leafValues\":\"- the values of the leaves being inserted.\"},\"return\":\"bytes32[] - the root of the merkle tree, after all the inserts.\"}}},\"userdoc\":{\"methods\":{\"_insertLeaf(bytes32)\":{\"notice\":\"Append a leaf to the tree\"},\"_insertLeaves(bytes32[])\":{\"notice\":\"Append leaves to the tree\"},\"constructor\":\"Constructor for the MerkleTreeController contract.\",\"getFrontierSlot(uint256)\":{\"notice\":\"Get the index of the frontier (or 'storage slot') into which we will next store a nodeValue (based on the leafIndex currently being inserted). See the top-level README for a detailed explanation.\"},\"insertLeaf(bytes32)\":{\"notice\":\"Insert a leaf into the Merkle Tree, update the root, and update any values in the (persistently stored) frontier.\"},\"insertLeaves(bytes32[])\":{\"notice\":\"Insert multiple leaves into the Merkle Tree, and then update the root, and update any values in the (persistently stored) frontier.\"}}}},\"settings\":{\"compilationTarget\":{\"/Users/em137vl/Documents/git/timber/deployer/contracts/MerkleTreeControllerMiMC.sol\":\"MerkleTreeControllerMiMC\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/em137vl/Documents/git/timber/deployer/contracts/MerkleTreeControllerMiMC.sol\":{\"keccak256\":\"0xc38e6f8dfa1cd396f2c5fd4af3cbb968ffa9fbd3d142956e4a50babd10c18cca\",\"urls\":[\"bzzr://6b6c80e1bdfe487a58979c68a9cd6ad24ef22b505382ea93748b6213658fe8c2\"]},\"/Users/em137vl/Documents/git/timber/deployer/contracts/MerkleTreeMiMC.sol\":{\"keccak256\":\"0x66e45d84be4b5f8a20678418ff3e962c934229de6c4f024ce20efddb7f2dff3d\",\"urls\":[\"bzzr://974679187d674f2de1d1f5fb33f7b142ceaf83cd647a9302dd93d8fa53bec776\"]},\"/Users/em137vl/Documents/git/timber/deployer/contracts/MiMC.sol\":{\"keccak256\":\"0x2d6ab18465b69591eacb299aea9ff19de447a05b47d34c3bf05b7b2bd8d91533\",\"urls\":[\"bzzr://3038a3e6e34e66ee7b00647263c96354df0dc37cf05c078d6fbdcd4d2d5dfffc\"]}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "sourceMap": "247:1675:0:-;;;1185:56;8:9:-1;5:2;;;30:1;27;20:12;5:2;1185:56:0;1224:10;1216:5;;:18;;;;;;;;;;;;;;;;;;247:1675;;;;;;",
  "deployedSourceMap": "247:1675:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;247:1675:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2174:36:2;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1694:226:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1694:226:0;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;1694:226:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;1694:226:0;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;1694:226:0;;;;;;;;;;;;:::i;:::-;;2502:259:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2502:259:4;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;2502:259:4;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;2502:259:4;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;2502:259:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;2502:259:4;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3497:514:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3497:514:2;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2323:21;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3120:369:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3120:369:4;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;3120:369:4;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4288:1626:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4288:1626:2;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1361:209:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1361:209:0;;;;;;;;;;;;;;;;;:::i;:::-;;2250:48:2;;;:::i;:::-;;;;;;;;;;;;;;;;;;;306:20:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;463:246:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;463:246:4;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2767:347;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2767:347:4;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;2767:347:4;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;2767:347:4;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;2767:347:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;2767:347:4;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;439:40:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;439:40:0;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;624:25;;;:::i;:::-;;;;;;;;;;;;;;;;;;;6220:4365:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6220:4365:2;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;6220:4365:2;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;6220:4365:2;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;6220:4365:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;6220:4365:2;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2174:36;2208:2;2174:36;:::o;1694:226:0:-;1027:5;;;;;;;;;;;1013:19;;:10;:19;;;1005:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1778:12;1793:24;1806:10;;1793:24;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;1793:24:0;;;;;;:12;:24::i;:::-;1778:39;;1909:4;1896:10;:17;;;;1093:1;1694:226;;:::o;2502:259:4:-;2589:7;2612:11;2626:10;2612:24;;;;2677:77;2689:7;2698:6;2741:4;2724:22;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;2724:22:4;;;2714:33;;;;;;2706:42;;2750:2;2677:10;:77::i;:::-;2670:84;;;2502:259;;;;:::o;3497:514:2:-;3559:9;3587:1;3580:8;;3620:1;3615;3603:9;:13;;;;;;:18;3598:407;;;3638:9;3650:1;3638:13;;3665:9;3677:1;3665:13;;3692:9;3712:1;3704:4;:9;;3692:21;;3727:268;3742:1;3734:4;:9;3727:268;;;3801:1;3793:4;3785;3781:1;3769:9;:13;:20;3768:29;;;;;;:34;3763:218;;;3834:4;3827:11;;3763:218;;;3892:4;3885:11;;3933:1;3925:4;:9;;3918:16;;3956:6;;;;;;;3763:218;3727:268;;;3598:407;;;;3497:514;;;:::o;2323:21::-;;;;:::o;3120:369:4:-;3197:7;3220:21;3258:14;3244:29;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;3244:29:4;;;;3220:53;;3303:7;3311:1;3303:10;;;;;;;;;;;3295:19;;3285:4;3290:1;3285:7;;;;;;;;;;;;;:29;;;;;3387:7;3395:1;3387:10;;;;;;;;;;;3379:19;;3369:4;3374:1;3369:7;;;;;;;;;;;;;:29;;;;;3466:15;3472:4;3478:1;3466:4;:15::i;:::-;3458:24;;3451:31;;;3120:369;;;:::o;4288:1626:2:-;4343:12;4436:9;;2208:2;2283:1;:15;4424:21;4416:69;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4496:9;4508:26;4524:9;;4508:15;:26::i;:::-;4496:38;;4544:14;4585:1;2208:2;2283:1;:15;4561:9;;:21;:25;4544:42;;4596:17;4616:9;4596:29;;4746:23;;:::i;:::-;4813:10;4826:1;4813:14;;4808:793;2208:2;4829:5;:18;4808:793;;;4886:4;4877:5;:13;4873:45;;;4909:9;4892:8;4901:4;4892:14;;;;;;;;:26;;;;4873:45;4954:1;4949;4937:9;:13;;;;;;:18;4933:658;;;5020:8;5029:5;5020:15;;;;;;;;;5009:5;5015:1;5009:8;;;;;;;;;;:26;;;;;5064:9;5053:5;5059:1;5053:8;;;;;;;;;;:20;;;;;5104:16;5114:5;5104:9;:16::i;:::-;5092:28;;5236:1;5231;5219:9;:13;5218:19;;;;;;5206:31;;4933:658;;;5348:9;5337:5;5343:1;5337:8;;;;;;;;;;:20;;;;;2956:66;5386:4;;5375:5;5381:1;5375:8;;;;;;;;;;:15;;;;;5421:16;5431:5;5421:9;:16::i;:::-;5409:28;;5547:1;5535:9;:13;;;;;;5523:25;;4933:658;4849:7;;;;;;;4808:793;;;;5618:9;5611:16;;5643:35;5651:9;;5662;5673:4;5643:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5766:9;;:11;;;;;;;;;;;;;5880:4;5873:11;;;;;;4288:1626;;;:::o;1361:209:0:-;1027:5;;;;;;;;;;;1013:19;;:10;:19;;;1005:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1431:12;1446:21;1457:9;1446:10;:21::i;:::-;1431:36;;1559:4;1546:10;:17;;;;1093:1;1361:209;:::o;2250:48:2:-;2208:2;2283:1;:15;2250:48;:::o;306:20:0:-;;;;;;;;;;;;;:::o;463:246:4:-;539:13;568:11;582:10;568:24;;;;633:69;642:4;648;689;672:22;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;672:22:4;;;662:33;;;;;;654:42;;698:2;633:7;:69::i;:::-;626:76;;;463:246;;;;:::o;2767:347::-;2842:7;2865:21;2903:7;:14;2889:29;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;2889:29:4;;;;2865:53;;2934:9;2944:1;2934:11;;2928:139;2951:7;:14;2947:1;:18;2928:139;;;3002:7;3010:1;3002:10;;;;;;;;;;;;;;2994:19;;2984:4;2989:1;2984:7;;;;;;;;;;;;;:29;;;;;2967:3;;;;;;;2928:139;;;;3091:15;3097:4;3103:1;3091:4;:15::i;:::-;3083:24;;3076:31;;;2767:347;;;:::o;439:40:0:-;;;;;;;;;;;;;;;;;:::o;624:25::-;;;;:::o;6220:4365:2:-;6287:12;6312:19;6334:10;:17;6312:39;;6430:9;;2208:2;2283:1;:15;6418:21;6410:69;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6522:9;;2208:2;2283:1;:15;6510:21;6493:14;:38;6489:728;;;6547:25;6605:9;;2208:2;2283:1;:15;6593:21;6575:14;:40;6547:68;;6735:7;6745:1;6735:11;;6730:425;6753:20;6748:2;:25;6730:425;;;7120:1;7107:10;7101:17;7097:25;7085:10;7078:45;6775:4;;;;;;;6730:425;;;;7197:9;;2208:2;2283:1;:15;7185:21;7168:38;;6489:728;;7227:9;7246:14;7270:17;7298:23;;:::i;:::-;7332:31;;:::i;:::-;7366:8;7332:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7453:14;7470:9;;7453:26;;7448:1518;7505:14;7493:9;;:26;7481:9;:38;7448:1518;;;7560:10;7583:9;;7571;:21;7560:33;;;;;;;;;;;;;;7548:45;;7643:1;2208:2;2283:1;:15;7619:9;:21;:25;7607:37;;7706:26;7722:9;7706:15;:26::i;:::-;7699:33;;7826:1;7818:4;:9;7814:125;;;7868:9;7847:12;7860:4;7847:18;;;;;;;;;;:30;;;;;7916:8;;7814:125;8044:10;8057:1;8044:14;;8039:852;8069:4;8060:5;:13;8039:852;;8123:1;8118;8106:9;:13;;;;;;:18;8102:775;;;8197:12;8218:1;8210:5;:9;8197:23;;;;;;;;;;;8186:5;8192:1;8186:8;;;;;;;;;;:34;;;;;8274:9;8263:5;8269:1;8263:8;;;;;;;;;;:20;;;;;8318:16;8328:5;8318:9;:16::i;:::-;8306:28;;8454:1;8449;8437:9;:13;8436:19;;;;;;8424:31;;8102:775;;;8578:9;8567:5;8573:1;8567:8;;;;;;;;;;:20;;;;;2956:66;8620:4;;8609:5;8615:1;8609:8;;;;;;;;;;:15;;;;;8659:16;8669:5;8659:9;:16::i;:::-;8647:28;;8789:1;8777:9;:13;;;;;;8765:25;;8102:775;8075:7;;;;;;;8039:852;;;;8925:9;8904:12;8917:4;8904:18;;;;;;;;;;:30;;;;;7448:1518;7521:11;;;;;;;7448:1518;;;;9044:10;9057:1;9044:14;;9039:193;9068:15;9060:5;:23;9039:193;;;9131:12;9144:5;9131:19;;;;;;;;;;;9112:8;9121:5;9112:15;;;;;;;;;:38;9108:114;;9188:12;9201:5;9188:19;;;;;;;;;;;9170:8;9179:5;9170:15;;;;;;;;:37;;;;9108:114;9085:7;;;;;;;9039:193;;;;9241:19;;:::i;:::-;;;9431:10;9451:1;9444:4;:8;9431:21;;9426:828;2208:2;9454:5;:19;9426:828;;9520:1;9515;9503:9;:13;;;;;;:18;9499:744;;;9586:8;9603:1;9595:5;:9;9586:19;;;;;;;;;9575:5;9581:1;9575:8;;;;;;;;;;:30;;;;;9634:9;9623:5;9629:1;9623:8;;;;;;;;;;:20;;;;;9674:16;9684:5;9674:9;:16::i;:::-;9662:28;;9806:1;9801;9789:9;:13;9788:19;;;;;;9776:31;;9499:744;;;9959:9;9948:5;9954:1;9948:8;;;;;;;;;;:20;;;;;2956:66;9997:4;;9986:5;9992:1;9986:8;;;;;;;;;;:15;;;;;10032:16;10042:5;10032:9;:16::i;:::-;10020:28;;10158:1;10146:9;:13;;;;;;10134:25;;9499:744;9475:7;;;;;;;9426:828;;;;10271:9;10264:16;;10296:38;10306:9;;10317:10;10329:4;10296:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;10296:38:2;;;;;;;;;;;;;;;;;;;10435:14;10422:9;;:27;;;;;;;;;;;10551:4;10544:11;;;;;;;;6220:4365;;;:::o;2034:462:4:-;2162:7;2185:9;2197:4;2185:16;;2211:14;2228:66;2211:83;;2304:9;2332:1;2328:5;;2323:149;2339:4;:11;2335:1;:15;2323:149;;;2455:6;2410:41;2418:4;2423:1;2418:7;;;;;;;;;;;;;;2427:1;2430:7;2439:11;2410:7;:41::i;:::-;2400:6;2390:4;2395:1;2390:7;;;;;;;;;;;;;;:16;;;;;;2385:1;:22;:66;2384:77;;;;;;2380:81;;2352:3;;;;;;;2323:149;;;2488:1;2481:8;;;;;2034:462;;;;;;:::o;841:1187::-;956:13;1027:1;1014:11;1011:18;1008:2;;;1042:1;1039;1032:12;1008:2;1135:4;1129:11;1173:2;1170:1;1166:10;1160:4;1153:24;1200:7;1197:1;1190:18;1236:66;;;1437:11;1422:485;1457:1;1454;1451:8;1422:485;;;1548:2;1545:1;1535:16;1532:1;1525:27;1666:6;1660:4;1651:6;1647:1;1641:8;1635:4;1628:30;1621:52;1616:57;;1740:6;1737:1;1734;1727:20;1722:25;;1875:6;1872:1;1863:6;1854;1851:1;1848;1841:20;1838:1;1831:39;1824:58;1816:66;;1474:1;1471;1467:9;1462:14;;1422:485;;;1426:24;2005:6;1999:4;1993;1986:26;1977:35;;994:1028;;;;;;;;;;:::o;247:1675:0:-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;247:1675:0;;;;:::o;:::-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;247:1675:0;;;;:::o",
  "source": "/**\nContract to manage permissions to update the leaves of the imported MerkleTree contract (which is the base contract which handles tree inserts and updates).\n\n@Author iAmMichaelConnor\n*/\npragma solidity ^0.5.8;\n\nimport \"./MerkleTreeMiMC.sol\";\n\ncontract MerkleTreeControllerMiMC is MerkleTreeMiMC {\n\n    address public owner; // We'll demonstrate simple 'permissioning' to update leaves by only allowing the owner to update leaves.\n\n    mapping(bytes32 => bytes32) public roots; // Example of a way to hold every root that's been calculated by this contract. This isn't actually used by this simple example-contract.\n\n    bytes32 public latestRoot; // Example of a way to hold the latest root so that users can retrieve it. This isn't actually used by this simple example-contract.\n\n    /**\n    We'll demonstrate simple 'permissioning' to update leaves by only allowing the owner to update leaves.\n    @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"You are not authorised to invoke this function\");\n        _;\n    }\n\n    /**\n    @notice Constructor for the MerkleTreeController contract.\n    */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n    @notice Append a leaf to the tree\n    @param leafValue - the value of the leaf being inserted.\n    */\n    function _insertLeaf(bytes32 leafValue) external onlyOwner {\n\n        bytes32 root = insertLeaf(leafValue); // recalculate the root of the tree\n\n        // roots[root] = root;\n\n        latestRoot = root;\n    }\n\n    /**\n    @notice Append leaves to the tree\n    @param leafValues - the values of the leaves being inserted.\n    */\n    function _insertLeaves(bytes32[] calldata leafValues) external onlyOwner {\n\n        bytes32 root = insertLeaves(leafValues); // recalculate the root of the tree\n\n        // roots[root] = root;\n\n        latestRoot = root;\n    }\n}\n",
  "sourcePath": "/Users/em137vl/Documents/git/timber/deployer/contracts/MerkleTreeControllerMiMC.sol",
  "ast": {
    "absolutePath": "/Users/em137vl/Documents/git/timber/deployer/contracts/MerkleTreeControllerMiMC.sol",
    "exportedSymbols": {
      "MerkleTreeControllerMiMC": [
        71
      ]
    },
    "id": 72,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".8"
        ],
        "nodeType": "PragmaDirective",
        "src": "190:23:0"
      },
      {
        "absolutePath": "/Users/em137vl/Documents/git/timber/deployer/contracts/MerkleTreeMiMC.sol",
        "file": "./MerkleTreeMiMC.sol",
        "id": 2,
        "nodeType": "ImportDirective",
        "scope": 72,
        "sourceUnit": 722,
        "src": "215:30:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3,
              "name": "MerkleTreeMiMC",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 721,
              "src": "284:14:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MerkleTreeMiMC_$721",
                "typeString": "contract MerkleTreeMiMC"
              }
            },
            "id": 4,
            "nodeType": "InheritanceSpecifier",
            "src": "284:14:0"
          }
        ],
        "contractDependencies": [
          721,
          1573
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 71,
        "linearizedBaseContracts": [
          71,
          721,
          1573
        ],
        "name": "MerkleTreeControllerMiMC",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 6,
            "name": "owner",
            "nodeType": "VariableDeclaration",
            "scope": 71,
            "src": "306:20:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 5,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "306:7:0",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 10,
            "name": "roots",
            "nodeType": "VariableDeclaration",
            "scope": 71,
            "src": "439:40:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_bytes32_$_t_bytes32_$",
              "typeString": "mapping(bytes32 => bytes32)"
            },
            "typeName": {
              "id": 9,
              "keyType": {
                "id": 7,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "447:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              },
              "nodeType": "Mapping",
              "src": "439:27:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_bytes32_$_t_bytes32_$",
                "typeString": "mapping(bytes32 => bytes32)"
              },
              "valueType": {
                "id": 8,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "458:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 12,
            "name": "latestRoot",
            "nodeType": "VariableDeclaration",
            "scope": 71,
            "src": "624:25:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 11,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "624:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 23,
              "nodeType": "Block",
              "src": "995:106:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 18,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 15,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1588,
                            "src": "1013:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 16,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1013:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 17,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 6,
                          "src": "1027:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1013:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "596f7520617265206e6f7420617574686f726973656420746f20696e766f6b6520746869732066756e6374696f6e",
                        "id": 19,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1034:48:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_6af07f385029d971e807b8a865d509915c5562585426c93e05f8579214aa193c",
                          "typeString": "literal_string \"You are not authorised to invoke this function\""
                        },
                        "value": "You are not authorised to invoke this function"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_6af07f385029d971e807b8a865d509915c5562585426c93e05f8579214aa193c",
                          "typeString": "literal_string \"You are not authorised to invoke this function\""
                        }
                      ],
                      "id": 14,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1591,
                        1592
                      ],
                      "referencedDeclaration": 1592,
                      "src": "1005:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 20,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1005:78:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 21,
                  "nodeType": "ExpressionStatement",
                  "src": "1005:78:0"
                },
                {
                  "id": 22,
                  "nodeType": "PlaceholderStatement",
                  "src": "1093:1:0"
                }
              ]
            },
            "documentation": "We'll demonstrate simple 'permissioning' to update leaves by only allowing the owner to update leaves.\n@dev Throws if called by any account other than the owner.",
            "id": 24,
            "name": "onlyOwner",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 13,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "992:2:0"
            },
            "src": "974:127:0",
            "visibility": "internal"
          },
          {
            "body": {
              "id": 32,
              "nodeType": "Block",
              "src": "1206:35:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 30,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 27,
                      "name": "owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6,
                      "src": "1216:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 28,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1588,
                        "src": "1224:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 29,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "1224:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "1216:18:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 31,
                  "nodeType": "ExpressionStatement",
                  "src": "1216:18:0"
                }
              ]
            },
            "documentation": "@notice Constructor for the MerkleTreeController contract.",
            "id": 33,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 25,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1196:2:0"
            },
            "returnParameters": {
              "id": 26,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1206:0:0"
            },
            "scope": 71,
            "src": "1185:56:0",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 50,
              "nodeType": "Block",
              "src": "1420:150:0",
              "statements": [
                {
                  "assignments": [
                    41
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 41,
                      "name": "root",
                      "nodeType": "VariableDeclaration",
                      "scope": 50,
                      "src": "1431:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 40,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "1431:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 45,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 43,
                        "name": "leafValue",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 35,
                        "src": "1457:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 42,
                      "name": "insertLeaf",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 387,
                      "src": "1446:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$returns$_t_bytes32_$",
                        "typeString": "function (bytes32) returns (bytes32)"
                      }
                    },
                    "id": 44,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1446:21:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1431:36:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 48,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 46,
                      "name": "latestRoot",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 12,
                      "src": "1546:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 47,
                      "name": "root",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 41,
                      "src": "1559:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "1546:17:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 49,
                  "nodeType": "ExpressionStatement",
                  "src": "1546:17:0"
                }
              ]
            },
            "documentation": "@notice Append a leaf to the tree\n@param leafValue - the value of the leaf being inserted.",
            "id": 51,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 38,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 37,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 24,
                  "src": "1410:9:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1410:9:0"
              }
            ],
            "name": "_insertLeaf",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 36,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 35,
                  "name": "leafValue",
                  "nodeType": "VariableDeclaration",
                  "scope": 51,
                  "src": "1382:17:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 34,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1382:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1381:19:0"
            },
            "returnParameters": {
              "id": 39,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1420:0:0"
            },
            "scope": 71,
            "src": "1361:209:0",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 69,
              "nodeType": "Block",
              "src": "1767:153:0",
              "statements": [
                {
                  "assignments": [
                    60
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 60,
                      "name": "root",
                      "nodeType": "VariableDeclaration",
                      "scope": 69,
                      "src": "1778:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 59,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "1778:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 64,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 62,
                        "name": "leafValues",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 54,
                        "src": "1806:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                          "typeString": "bytes32[] calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                          "typeString": "bytes32[] calldata"
                        }
                      ],
                      "id": 61,
                      "name": "insertLeaves",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 720,
                      "src": "1793:12:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes32[] memory) returns (bytes32)"
                      }
                    },
                    "id": 63,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1793:24:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1778:39:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 67,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 65,
                      "name": "latestRoot",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 12,
                      "src": "1896:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 66,
                      "name": "root",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60,
                      "src": "1909:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "1896:17:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 68,
                  "nodeType": "ExpressionStatement",
                  "src": "1896:17:0"
                }
              ]
            },
            "documentation": "@notice Append leaves to the tree\n@param leafValues - the values of the leaves being inserted.",
            "id": 70,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 57,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 56,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 24,
                  "src": "1757:9:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1757:9:0"
              }
            ],
            "name": "_insertLeaves",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 55,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 54,
                  "name": "leafValues",
                  "nodeType": "VariableDeclaration",
                  "scope": 70,
                  "src": "1717:29:0",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 52,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1717:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 53,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "1717:9:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1716:31:0"
            },
            "returnParameters": {
              "id": 58,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1767:0:0"
            },
            "scope": 71,
            "src": "1694:226:0",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 72,
        "src": "247:1675:0"
      }
    ],
    "src": "190:1733:0"
  },
  "legacyAST": {
    "absolutePath": "/Users/em137vl/Documents/git/timber/deployer/contracts/MerkleTreeControllerMiMC.sol",
    "exportedSymbols": {
      "MerkleTreeControllerMiMC": [
        71
      ]
    },
    "id": 72,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".8"
        ],
        "nodeType": "PragmaDirective",
        "src": "190:23:0"
      },
      {
        "absolutePath": "/Users/em137vl/Documents/git/timber/deployer/contracts/MerkleTreeMiMC.sol",
        "file": "./MerkleTreeMiMC.sol",
        "id": 2,
        "nodeType": "ImportDirective",
        "scope": 72,
        "sourceUnit": 722,
        "src": "215:30:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3,
              "name": "MerkleTreeMiMC",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 721,
              "src": "284:14:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MerkleTreeMiMC_$721",
                "typeString": "contract MerkleTreeMiMC"
              }
            },
            "id": 4,
            "nodeType": "InheritanceSpecifier",
            "src": "284:14:0"
          }
        ],
        "contractDependencies": [
          721,
          1573
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 71,
        "linearizedBaseContracts": [
          71,
          721,
          1573
        ],
        "name": "MerkleTreeControllerMiMC",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 6,
            "name": "owner",
            "nodeType": "VariableDeclaration",
            "scope": 71,
            "src": "306:20:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 5,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "306:7:0",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 10,
            "name": "roots",
            "nodeType": "VariableDeclaration",
            "scope": 71,
            "src": "439:40:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_bytes32_$_t_bytes32_$",
              "typeString": "mapping(bytes32 => bytes32)"
            },
            "typeName": {
              "id": 9,
              "keyType": {
                "id": 7,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "447:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              },
              "nodeType": "Mapping",
              "src": "439:27:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_bytes32_$_t_bytes32_$",
                "typeString": "mapping(bytes32 => bytes32)"
              },
              "valueType": {
                "id": 8,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "458:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 12,
            "name": "latestRoot",
            "nodeType": "VariableDeclaration",
            "scope": 71,
            "src": "624:25:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 11,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "624:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 23,
              "nodeType": "Block",
              "src": "995:106:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 18,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 15,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1588,
                            "src": "1013:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 16,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1013:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 17,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 6,
                          "src": "1027:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1013:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "596f7520617265206e6f7420617574686f726973656420746f20696e766f6b6520746869732066756e6374696f6e",
                        "id": 19,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1034:48:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_6af07f385029d971e807b8a865d509915c5562585426c93e05f8579214aa193c",
                          "typeString": "literal_string \"You are not authorised to invoke this function\""
                        },
                        "value": "You are not authorised to invoke this function"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_6af07f385029d971e807b8a865d509915c5562585426c93e05f8579214aa193c",
                          "typeString": "literal_string \"You are not authorised to invoke this function\""
                        }
                      ],
                      "id": 14,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1591,
                        1592
                      ],
                      "referencedDeclaration": 1592,
                      "src": "1005:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 20,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1005:78:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 21,
                  "nodeType": "ExpressionStatement",
                  "src": "1005:78:0"
                },
                {
                  "id": 22,
                  "nodeType": "PlaceholderStatement",
                  "src": "1093:1:0"
                }
              ]
            },
            "documentation": "We'll demonstrate simple 'permissioning' to update leaves by only allowing the owner to update leaves.\n@dev Throws if called by any account other than the owner.",
            "id": 24,
            "name": "onlyOwner",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 13,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "992:2:0"
            },
            "src": "974:127:0",
            "visibility": "internal"
          },
          {
            "body": {
              "id": 32,
              "nodeType": "Block",
              "src": "1206:35:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 30,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 27,
                      "name": "owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6,
                      "src": "1216:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 28,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1588,
                        "src": "1224:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 29,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "1224:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "1216:18:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 31,
                  "nodeType": "ExpressionStatement",
                  "src": "1216:18:0"
                }
              ]
            },
            "documentation": "@notice Constructor for the MerkleTreeController contract.",
            "id": 33,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 25,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1196:2:0"
            },
            "returnParameters": {
              "id": 26,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1206:0:0"
            },
            "scope": 71,
            "src": "1185:56:0",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 50,
              "nodeType": "Block",
              "src": "1420:150:0",
              "statements": [
                {
                  "assignments": [
                    41
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 41,
                      "name": "root",
                      "nodeType": "VariableDeclaration",
                      "scope": 50,
                      "src": "1431:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 40,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "1431:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 45,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 43,
                        "name": "leafValue",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 35,
                        "src": "1457:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 42,
                      "name": "insertLeaf",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 387,
                      "src": "1446:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$returns$_t_bytes32_$",
                        "typeString": "function (bytes32) returns (bytes32)"
                      }
                    },
                    "id": 44,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1446:21:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1431:36:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 48,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 46,
                      "name": "latestRoot",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 12,
                      "src": "1546:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 47,
                      "name": "root",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 41,
                      "src": "1559:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "1546:17:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 49,
                  "nodeType": "ExpressionStatement",
                  "src": "1546:17:0"
                }
              ]
            },
            "documentation": "@notice Append a leaf to the tree\n@param leafValue - the value of the leaf being inserted.",
            "id": 51,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 38,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 37,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 24,
                  "src": "1410:9:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1410:9:0"
              }
            ],
            "name": "_insertLeaf",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 36,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 35,
                  "name": "leafValue",
                  "nodeType": "VariableDeclaration",
                  "scope": 51,
                  "src": "1382:17:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 34,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1382:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1381:19:0"
            },
            "returnParameters": {
              "id": 39,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1420:0:0"
            },
            "scope": 71,
            "src": "1361:209:0",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 69,
              "nodeType": "Block",
              "src": "1767:153:0",
              "statements": [
                {
                  "assignments": [
                    60
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 60,
                      "name": "root",
                      "nodeType": "VariableDeclaration",
                      "scope": 69,
                      "src": "1778:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 59,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "1778:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 64,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 62,
                        "name": "leafValues",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 54,
                        "src": "1806:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                          "typeString": "bytes32[] calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                          "typeString": "bytes32[] calldata"
                        }
                      ],
                      "id": 61,
                      "name": "insertLeaves",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 720,
                      "src": "1793:12:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes32[] memory) returns (bytes32)"
                      }
                    },
                    "id": 63,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1793:24:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1778:39:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 67,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 65,
                      "name": "latestRoot",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 12,
                      "src": "1896:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 66,
                      "name": "root",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60,
                      "src": "1909:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "1896:17:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 68,
                  "nodeType": "ExpressionStatement",
                  "src": "1896:17:0"
                }
              ]
            },
            "documentation": "@notice Append leaves to the tree\n@param leafValues - the values of the leaves being inserted.",
            "id": 70,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 57,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 56,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 24,
                  "src": "1757:9:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1757:9:0"
              }
            ],
            "name": "_insertLeaves",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 55,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 54,
                  "name": "leafValues",
                  "nodeType": "VariableDeclaration",
                  "scope": 70,
                  "src": "1717:29:0",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 52,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1717:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 53,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "1717:9:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1716:31:0"
            },
            "returnParameters": {
              "id": 58,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1767:0:0"
            },
            "scope": 71,
            "src": "1694:226:0",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 72,
        "src": "247:1675:0"
      }
    ],
    "src": "190:1733:0"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.8+commit.23d335f2.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.9",
  "updatedAt": "2020-04-26T15:32:51.493Z",
  "devdoc": {
    "methods": {
      "_insertLeaf(bytes32)": {
        "params": {
          "leafValue": "- the value of the leaf being inserted."
        }
      },
      "_insertLeaves(bytes32[])": {
        "params": {
          "leafValues": "- the values of the leaves being inserted."
        }
      },
      "getFrontierSlot(uint256)": {
        "return": "uint - the index of the frontier (or 'storage slot') into which we will next store a nodeValue"
      },
      "insertLeaf(bytes32)": {
        "params": {
          "leafValue": "- the value of the leaf being inserted."
        },
        "return": "bytes32 - the root of the merkle tree, after the insert."
      },
      "insertLeaves(bytes32[])": {
        "params": {
          "leafValues": "- the values of the leaves being inserted."
        },
        "return": "bytes32[] - the root of the merkle tree, after all the inserts."
      },
      "getFrontierSlot(uint40)": {
        "return": "uint - the index of the frontier (or 'storage slot') into which we will next store a nodeValue"
      }
    }
  },
  "userdoc": {
    "methods": {
      "_insertLeaf(bytes32)": {
        "notice": "Append a leaf to the tree"
      },
      "_insertLeaves(bytes32[])": {
        "notice": "Append leaves to the tree"
      },
      "constructor": "Constructor for the MerkleTreeController contract.",
      "getFrontierSlot(uint256)": {
        "notice": "Get the index of the frontier (or 'storage slot') into which we will next store a nodeValue (based on the leafIndex currently being inserted). See the top-level README for a detailed explanation."
      },
      "insertLeaf(bytes32)": {
        "notice": "Insert a leaf into the Merkle Tree, update the root, and update any values in the (persistently stored) frontier."
      },
      "insertLeaves(bytes32[])": {
        "notice": "Insert multiple leaves into the Merkle Tree, and then update the root, and update any values in the (persistently stored) frontier."
      },
      "getFrontierSlot(uint40)": {
        "notice": "Get the index of the frontier (or 'storage slot') into which we will next store a nodeValue (based on the leafIndex currently being inserted). See the top-level README for a detailed explanation."
      }
    }
  }
}