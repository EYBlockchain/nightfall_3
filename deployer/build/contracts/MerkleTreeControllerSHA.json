{
  "contractName": "MerkleTreeControllerSHA",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "treeHeight",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "leafCount",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "leafValue",
          "type": "bytes32"
        }
      ],
      "name": "insertLeaf",
      "outputs": [
        {
          "name": "root",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "treeWidth",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "roots",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "latestRoot",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "leafValues",
          "type": "bytes32[]"
        }
      ],
      "name": "insertLeaves",
      "outputs": [
        {
          "name": "root",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "leafIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "leafValue",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "root",
          "type": "bytes32"
        }
      ],
      "name": "NewLeaf",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "minLeafIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "leafValues",
          "type": "bytes32[]"
        },
        {
          "indexed": false,
          "name": "root",
          "type": "bytes32"
        }
      ],
      "name": "NewLeaves",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "leafValue",
          "type": "bytes32"
        }
      ],
      "name": "_insertLeaf",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "leafValues",
          "type": "bytes32[]"
        }
      ],
      "name": "_insertLeaves",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.8+commit.23d335f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"treeHeight\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"leafValues\",\"type\":\"bytes32[]\"}],\"name\":\"_insertLeaves\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"leafCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"leafValue\",\"type\":\"bytes32\"}],\"name\":\"insertLeaf\",\"outputs\":[{\"name\":\"root\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"leafValue\",\"type\":\"bytes32\"}],\"name\":\"_insertLeaf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treeWidth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"roots\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestRoot\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"leafValues\",\"type\":\"bytes32[]\"}],\"name\":\"insertLeaves\",\"outputs\":[{\"name\":\"root\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"leafIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"leafValue\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"NewLeaf\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"minLeafIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"leafValues\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"NewLeaves\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"_insertLeaf(bytes32)\":{\"params\":{\"leafValue\":\"- the value of the leaf being inserted.\"}},\"_insertLeaves(bytes32[])\":{\"params\":{\"leafValues\":\"- the values of the leaves being inserted.\"}},\"insertLeaf(bytes32)\":{\"params\":{\"leafValue\":\"- the value of the leaf being inserted.\"},\"return\":\"bytes32 - the root of the merkle tree, after the insert.\"},\"insertLeaves(bytes32[])\":{\"params\":{\"leafValues\":\"- the values of the leaves being inserted.\"},\"return\":\"bytes32[] - the root of the merkle tree, after all the inserts.\"}}},\"userdoc\":{\"methods\":{\"_insertLeaf(bytes32)\":{\"notice\":\"Append a leaf to the tree\"},\"_insertLeaves(bytes32[])\":{\"notice\":\"Append leaves to the tree\"},\"constructor\":\"Constructor for the MerkleTreeController contract.\",\"insertLeaf(bytes32)\":{\"notice\":\"Insert a leaf into the Merkle Tree, update the root, and update any values in the (persistently stored) frontier.\"},\"insertLeaves(bytes32[])\":{\"notice\":\"Insert multiple leaves into the Merkle Tree, and then update the root, and update any values in the (persistently stored) frontier.\"}}}},\"settings\":{\"compilationTarget\":{\"/Users/em137vl/Documents/git/timber/deployer/contracts/MerkleTreeControllerSHA.sol\":\"MerkleTreeControllerSHA\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/em137vl/Documents/git/timber/deployer/contracts/MerkleTreeControllerSHA.sol\":{\"keccak256\":\"0xf9652e5a28b136912c3350780edc86957e5391f9440caeb6adc1215800ba5212\",\"urls\":[\"bzzr://481c5234aa5a3a90e2c8915a86f32d2f97f434e739ee0891f9f6720a41a72ce9\"]},\"/Users/em137vl/Documents/git/timber/deployer/contracts/MerkleTreeSHA.sol\":{\"keccak256\":\"0xc79cd5a313f2e1df31f2902f2fc5f36aab12a9ddfae8617b4c0825b51b6bf6a9\",\"urls\":[\"bzzr://33374393cbbfddd30a5a177f210a3972ecdf378c39e31a2ed78853a24cac1df8\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5033602160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610e50806100616000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806376c601b11161006657806376c601b1146101c85780638da5cb5b146101e6578063ae6dead714610230578063d7b0fef114610272578063dc52bf9f146102905761009e565b806301e3e915146100a357806303ebd1d4146100c157806330e69fc31461013a5780635c8b80ab1461015857806371b625411461019a575b600080fd5b6100ab61035c565b6040518082815260200191505060405180910390f35b610138600480360360208110156100d757600080fd5b81019080803590602001906401000000008111156100f457600080fd5b82018360208201111561010657600080fd5b8035906020019184602083028401116401000000008311171561012857600080fd5b9091929391929390505050610361565b005b610142610461565b6040518082815260200191505060405180910390f35b6101846004803603602081101561016e57600080fd5b8101908080359060200190929190505050610467565b6040518082815260200191505060405180910390f35b6101c6600480360360208110156101b057600080fd5b81019080803590602001909291905050506106bf565b005b6101d061077d565b6040518082815260200191505060405180910390f35b6101ee610785565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61025c6004803603602081101561024657600080fd5b81019080803590602001909291905050506107ab565b6040518082815260200191505060405180910390f35b61027a6107c3565b6040518082815260200191505060405180910390f35b610346600480360360208110156102a657600080fd5b81019080803590602001906401000000008111156102c357600080fd5b8201836020820111156102d557600080fd5b803590602001918460208302840111640100000000831117156102f757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192905050506107c9565b6040518082815260200191505060405180910390f35b602081565b602160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610407576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180610df7602e913960400191505060405180910390fd5b6000610453838380806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050506107c9565b905080602381905550505050565b60005481565b60008054602060020a116104c6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610dd46023913960400191505060405180910390fd5b60006104d3600054610d17565b905060006001602060020a600054010390506000602885901b90506000806104f9610d8e565b600080600090505b602081101561064a578781141561055457856001896020811061052057fe5b0160006101000a8154817affffffffffffffffffffffffffffffffffffffffffffffffffffff021916908360281c02179055505b60006002888161056057fe5b0614156105e1576001816020811061057457fe5b0160009054906101000a900460281b945085935060405185815284601b8201526020846036836002600019fa925082600081146105b0576105b2565bfe5b50506028836000600181106105c357fe5b6020020151901b9550600260018803816105d957fe5b04965061063d565b859450600060281b935060405185815284601b8201526020846036836002600019fa9250826000811461061357610615565bfe5b505060288360006001811061062657fe5b6020020151901b95506002878161063957fe5b0496505b8080600101915050610501565b508464ffffffffff191697507f6a82ba2aa1d2c039c41e6e2b5a5a1090d09906f060d32af9c1ac0beff7af75c06000548a8a60405180848152602001838152602001828152602001935050505060405180910390a1600080815480929190600101919050555087975050505050505050919050565b602160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610765576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180610df7602e913960400191505060405180910390fd5b600061077082610467565b9050806023819055505050565b602060020a81565b602160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60226020528060005260406000206000915090505481565b60235481565b60008082519050600054602060020a1161082e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610dd46023913960400191505060405180910390fd5b600054602060020a0381111561087c5760008054602060020a038203905060008090505b8181101561086e57600185510385528080600101915050610852565b50600054602060020a039150505b600080600080600061088c610d8e565b6000610896610db0565b60016020806020026040519081016040528092919082602080156108e4576020028201915b8160009054906101000a900460281b64ffffffffff1916815260200190600101908083116108bb575b505050505090506000805490505b8960005401811015610a9c5760288c60005483038151811061091057fe5b6020026020010151901b96506001602060020a820103975061093181610d17565b985060008914156109695786828a6020811061094957fe5b602002019064ffffffffff1916908164ffffffffff191681525050610a8f565b6000600190505b898111610a6557600060028a8161098357fe5b0614156109fc5782600182036020811061099957fe5b6020020151965087955060405187815286601b8201526020866036836002600019fa945084600081146109cb576109cd565bfe5b50506028856000600181106109de57fe5b6020020151901b9750600260018a03816109f457fe5b049850610a58565b879650600060281b955060405187815286601b8201526020866036836002600019fa94508460008114610a2e57610a30565bfe5b5050602885600060018110610a4157fe5b6020020151901b975060028981610a5457fe5b0498505b8080600101915050610970565b5086828a60208110610a7357fe5b602002019064ffffffffff1916908164ffffffffff1916815250505b80806001019150506108f2565b5060008090505b6020811015610b4d57818160208110610ab857fe5b602002015164ffffffffff191660018260208110610ad257fe5b0160009054906101000a900460281b64ffffffffff191614610b4057818160208110610afa57fe5b602002015160018260208110610b0c57fe5b0160006101000a8154817affffffffffffffffffffffffffffffffffffffffffffffffffffff021916908360281c02179055505b8080600101915050610aa3565b50610b56610db0565b905060006001890190505b60208111610c6157600060028981610b7557fe5b061415610bf857600180820360208110610b8b57fe5b0160009054906101000a900460281b955086945060405186815285601b8201526020856036836002600019fa93508360008114610bc757610bc9565bfe5b5050602884600060018110610bda57fe5b6020020151901b965060026001890381610bf057fe5b049750610c54565b869550600060281b945060405186815285601b8201526020856036836002600019fa93508360008114610c2a57610c2c565bfe5b5050602884600060018110610c3d57fe5b6020020151901b965060028881610c5057fe5b0497505b8080600101915050610b61565b508564ffffffffff191699507f8ec50f97970775682a68d3c6f9caedf60fd82448ea40706b8b65d6c03648b9226000548c8c6040518084815260200180602001838152602001828103825284818151815260200191508051906020019060200280838360005b83811015610ce2578082015181840152602081019050610cc7565b5050505090500194505050505060405180910390a1886000808282540192505081905550899950505050505050505050919050565b6000809050600160028381610d2857fe5b061415610d89576000600190506000600290506000600182901b90505b6000841415610d855760008183600188010381610d5e57fe5b061415610d6d57829350610d80565b809150600181901b905082806001019350505b610d45565b5050505b919050565b6040518060200160405280600190602082028038833980820191505090505090565b60405180610400016040528060209060208202803883398082019150509050509056fe5468657265206973206e6f207370616365206c65667420696e2074686520747265652e596f7520617265206e6f7420617574686f726973656420746f20696e766f6b6520746869732066756e6374696f6ea165627a7a72305820eb9d193a194b3d8ffa093d923e39cd2a39d5cdf67010bd7e5f6e2d652e04ab320029",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c806376c601b11161006657806376c601b1146101c85780638da5cb5b146101e6578063ae6dead714610230578063d7b0fef114610272578063dc52bf9f146102905761009e565b806301e3e915146100a357806303ebd1d4146100c157806330e69fc31461013a5780635c8b80ab1461015857806371b625411461019a575b600080fd5b6100ab61035c565b6040518082815260200191505060405180910390f35b610138600480360360208110156100d757600080fd5b81019080803590602001906401000000008111156100f457600080fd5b82018360208201111561010657600080fd5b8035906020019184602083028401116401000000008311171561012857600080fd5b9091929391929390505050610361565b005b610142610461565b6040518082815260200191505060405180910390f35b6101846004803603602081101561016e57600080fd5b8101908080359060200190929190505050610467565b6040518082815260200191505060405180910390f35b6101c6600480360360208110156101b057600080fd5b81019080803590602001909291905050506106bf565b005b6101d061077d565b6040518082815260200191505060405180910390f35b6101ee610785565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61025c6004803603602081101561024657600080fd5b81019080803590602001909291905050506107ab565b6040518082815260200191505060405180910390f35b61027a6107c3565b6040518082815260200191505060405180910390f35b610346600480360360208110156102a657600080fd5b81019080803590602001906401000000008111156102c357600080fd5b8201836020820111156102d557600080fd5b803590602001918460208302840111640100000000831117156102f757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192905050506107c9565b6040518082815260200191505060405180910390f35b602081565b602160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610407576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180610df7602e913960400191505060405180910390fd5b6000610453838380806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050506107c9565b905080602381905550505050565b60005481565b60008054602060020a116104c6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610dd46023913960400191505060405180910390fd5b60006104d3600054610d17565b905060006001602060020a600054010390506000602885901b90506000806104f9610d8e565b600080600090505b602081101561064a578781141561055457856001896020811061052057fe5b0160006101000a8154817affffffffffffffffffffffffffffffffffffffffffffffffffffff021916908360281c02179055505b60006002888161056057fe5b0614156105e1576001816020811061057457fe5b0160009054906101000a900460281b945085935060405185815284601b8201526020846036836002600019fa925082600081146105b0576105b2565bfe5b50506028836000600181106105c357fe5b6020020151901b9550600260018803816105d957fe5b04965061063d565b859450600060281b935060405185815284601b8201526020846036836002600019fa9250826000811461061357610615565bfe5b505060288360006001811061062657fe5b6020020151901b95506002878161063957fe5b0496505b8080600101915050610501565b508464ffffffffff191697507f6a82ba2aa1d2c039c41e6e2b5a5a1090d09906f060d32af9c1ac0beff7af75c06000548a8a60405180848152602001838152602001828152602001935050505060405180910390a1600080815480929190600101919050555087975050505050505050919050565b602160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610765576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180610df7602e913960400191505060405180910390fd5b600061077082610467565b9050806023819055505050565b602060020a81565b602160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60226020528060005260406000206000915090505481565b60235481565b60008082519050600054602060020a1161082e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610dd46023913960400191505060405180910390fd5b600054602060020a0381111561087c5760008054602060020a038203905060008090505b8181101561086e57600185510385528080600101915050610852565b50600054602060020a039150505b600080600080600061088c610d8e565b6000610896610db0565b60016020806020026040519081016040528092919082602080156108e4576020028201915b8160009054906101000a900460281b64ffffffffff1916815260200190600101908083116108bb575b505050505090506000805490505b8960005401811015610a9c5760288c60005483038151811061091057fe5b6020026020010151901b96506001602060020a820103975061093181610d17565b985060008914156109695786828a6020811061094957fe5b602002019064ffffffffff1916908164ffffffffff191681525050610a8f565b6000600190505b898111610a6557600060028a8161098357fe5b0614156109fc5782600182036020811061099957fe5b6020020151965087955060405187815286601b8201526020866036836002600019fa945084600081146109cb576109cd565bfe5b50506028856000600181106109de57fe5b6020020151901b9750600260018a03816109f457fe5b049850610a58565b879650600060281b955060405187815286601b8201526020866036836002600019fa94508460008114610a2e57610a30565bfe5b5050602885600060018110610a4157fe5b6020020151901b975060028981610a5457fe5b0498505b8080600101915050610970565b5086828a60208110610a7357fe5b602002019064ffffffffff1916908164ffffffffff1916815250505b80806001019150506108f2565b5060008090505b6020811015610b4d57818160208110610ab857fe5b602002015164ffffffffff191660018260208110610ad257fe5b0160009054906101000a900460281b64ffffffffff191614610b4057818160208110610afa57fe5b602002015160018260208110610b0c57fe5b0160006101000a8154817affffffffffffffffffffffffffffffffffffffffffffffffffffff021916908360281c02179055505b8080600101915050610aa3565b50610b56610db0565b905060006001890190505b60208111610c6157600060028981610b7557fe5b061415610bf857600180820360208110610b8b57fe5b0160009054906101000a900460281b955086945060405186815285601b8201526020856036836002600019fa93508360008114610bc757610bc9565bfe5b5050602884600060018110610bda57fe5b6020020151901b965060026001890381610bf057fe5b049750610c54565b869550600060281b945060405186815285601b8201526020856036836002600019fa93508360008114610c2a57610c2c565bfe5b5050602884600060018110610c3d57fe5b6020020151901b965060028881610c5057fe5b0497505b8080600101915050610b61565b508564ffffffffff191699507f8ec50f97970775682a68d3c6f9caedf60fd82448ea40706b8b65d6c03648b9226000548c8c6040518084815260200180602001838152602001828103825284818151815260200191508051906020019060200280838360005b83811015610ce2578082015181840152602081019050610cc7565b5050505090500194505050505060405180910390a1886000808282540192505081905550899950505050505050505050919050565b6000809050600160028381610d2857fe5b061415610d89576000600190506000600290506000600182901b90505b6000841415610d855760008183600188010381610d5e57fe5b061415610d6d57829350610d80565b809150600181901b905082806001019350505b610d45565b5050505b919050565b6040518060200160405280600190602082028038833980820191505090505090565b60405180610400016040528060209060208202803883398082019150509050509056fe5468657265206973206e6f207370616365206c65667420696e2074686520747265652e596f7520617265206e6f7420617574686f726973656420746f20696e766f6b6520746869732066756e6374696f6ea165627a7a72305820eb9d193a194b3d8ffa093d923e39cd2a39d5cdf67010bd7e5f6e2d652e04ab320029",
  "sourceMap": "246:1673:1:-;;;1182:56;8:9:-1;5:2;;;30:1;27;20:12;5:2;1182:56:1;1221:10;1213:5;;:18;;;;;;;;;;;;;;;;;;246:1673;;;;;;",
  "deployedSourceMap": "246:1673:1:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;246:1673:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2105:36:3;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1691:226:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1691:226:1;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;1691:226:1;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;1691:226:1;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;1691:226:1;;;;;;;;;;;;:::i;:::-;;2220:24:3;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4137:4257;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4137:4257:3;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1358:209:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1358:209:1;;;;;;;;;;;;;;;;;:::i;:::-;;2147:48:3;;;:::i;:::-;;;;;;;;;;;;;;;;;;;303:20:1;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;436:40;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;436:40:1;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;621:25;;;:::i;:::-;;;;;;;;;;;;;;;;;;;8700:7588:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8700:7588:3;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;8700:7588:3;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;8700:7588:3;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;8700:7588:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;8700:7588:3;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2105:36;2139:2;2105:36;:::o;1691:226:1:-;1024:5;;;;;;;;;;;1010:19;;:10;:19;;;1002:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1775:12;1790:24;1803:10;;1790:24;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;1790:24:1;;;;;;:12;:24::i;:::-;1775:39;;1906:4;1893:10;:17;;;;1090:1;1691:226;;:::o;2220:24:3:-;;;;:::o;4137:4257::-;4192:12;4285:9;;2139:2;2180:1;:15;4273:21;4265:69;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4345:9;4357:26;4373:9;;4357:15;:26::i;:::-;4345:38;;4393:14;4434:1;2139:2;2180:1;:15;4410:9;;:21;:25;4393:42;;4445:17;4486:2;4473:9;:15;;4445:44;;4610:17;4637:18;4665:24;;:::i;:::-;4730:12;4758:10;4771:1;4758:14;;4753:3328;2139:2;4774:5;:18;4753:3328;;;4831:4;4822:5;:13;4818:45;;;4854:9;4837:8;4846:4;4837:14;;;;;;;;;:26;;;;;;;;;;;;;;;;;;4818:45;4899:1;4894;4882:9;:13;;;;;;:18;4878:3193;;;4966:8;4975:5;4966:15;;;;;;;;;;;;;;;;;;4954:27;;5012:9;4999:22;;6266:4;6260:11;6368:9;6361:5;6354:24;6444:10;6437:4;6430:5;6426:16;6419:36;6578:4;6570:6;6564:4;6557:5;6554:1;6550;6546:6;6535:48;6524:59;;6676:7;6689:1;6684:20;;;;6669:35;;6684:20;6693:9;6669:35;;6187:535;6773:2;6760:6;6767:1;6760:9;;;;;;;;;;;:15;;6740:36;;6892:1;6887;6875:9;:13;6874:19;;;;;;6862:31;;4878:3193;;;7105:9;7093:21;;2814:56;7145:4;;7132:17;;7307:4;7301:11;7409:9;7402:5;7395:24;7485:10;7478:4;7471:5;7467:16;7460:36;7619:4;7611:6;7605:4;7598:5;7595:1;7591;7587:6;7576:48;7565:59;;7717:7;7730:1;7725:20;;;;7710:35;;7725:20;7734:9;7710:35;;7228:535;7814:2;7801:6;7808:1;7801:9;;;;;;;;;;;:15;;7781:36;;7927:1;7915:9;:13;;;;;;7903:25;;4878:3193;4794:7;;;;;;;4753:3328;;;;8098:9;8091:16;;;;;8123:35;8131:9;;8142;8153:4;8123:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8246:9;;:11;;;;;;;;;;;;;8360:4;8353:11;;;;;;;;;4137:4257;;;:::o;1358:209:1:-;1024:5;;;;;;;;;;;1010:19;;:10;:19;;;1002:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1428:12;1443:21;1454:9;1443:10;:21::i;:::-;1428:36;;1556:4;1543:10;:17;;;;1090:1;1358:209;:::o;2147:48:3:-;2139:2;2180:1;:15;2147:48;:::o;303:20:1:-;;;;;;;;;;;;;:::o;436:40::-;;;;;;;;;;;;;;;;;:::o;621:25::-;;;;:::o;8700:7588:3:-;8767:12;8791:19;8813:10;:17;8791:39;;8909:9;;2139:2;2180:1;:15;8897:21;8889:69;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9001:9;;2139:2;2180:1;:15;8989:21;8972:14;:38;8968:728;;;9026:25;9084:9;;2139:2;2180:1;:15;9072:21;9054:14;:40;9026:68;;9214:7;9224:1;9214:11;;9209:425;9232:20;9227:2;:25;9209:425;;;9599:1;9586:10;9580:17;9576:25;9564:10;9557:45;9254:4;;;;;;;9209:425;;;;9676:9;;2139:2;2180:1;:15;9664:21;9647:38;;8968:728;;9706:9;9725:14;9749:17;9777;9804:18;9832:24;;:::i;:::-;9892:12;9915:31;;:::i;:::-;9949:8;9915:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10036:14;10053:9;;10036:26;;10031:3178;10088:14;10076:9;;:26;10064:9;:38;10031:3178;;;10188:2;10151:10;10174:9;;10162;:21;10151:33;;;;;;;;;;;;;;:39;;10131:60;;10241:1;2139:2;2180:1;:15;10217:9;:21;:25;10205:37;;10304:26;10320:9;10304:15;:26::i;:::-;10297:33;;10424:1;10416:4;:9;10412:125;;;10466:9;10445:12;10458:4;10445:18;;;;;;;;;;:30;;;;;;;;;;;;;10514:8;;10412:125;10642:10;10655:1;10642:14;;10637:2497;10667:4;10658:5;:13;10637:2497;;10721:1;10716;10704:9;:13;;;;;;:18;10700:2420;;;10796:12;10817:1;10809:5;:9;10796:23;;;;;;;;;;;10784:35;;10854:9;10841:22;;11154:4;11148:11;11260:9;11253:5;11246:24;11340:10;11333:4;11326:5;11322:16;11315:36;11478:4;11470:6;11464:4;11457:5;11454:1;11450;11446:6;11435:48;11424:59;;11584:7;11597:1;11592:20;;;;11577:35;;11592:20;11601:9;11577:35;;11067:567;11800:2;11787:6;11794:1;11787:9;;;;;;;;;;;:15;;11767:36;;11923:1;11918;11906:9;:13;11905:19;;;;;;11893:31;;10700:2420;;;12048:9;12036:21;;2814:56;12092:4;;12079:17;;12269:4;12263:11;12375:9;12368:5;12361:24;12455:10;12448:4;12441:5;12437:16;12430:36;12593:4;12585:6;12579:4;12572:5;12569:1;12565;12561:6;12550:48;12539:59;;12699:7;12712:1;12707:20;;;;12692:35;;12707:20;12716:9;12692:35;;12182:567;12915:2;12902:6;12909:1;12902:9;;;;;;;;;;;:15;;12882:36;;13032:1;13020:9;:13;;;;;;13008:25;;10700:2420;10673:7;;;;;;;10637:2497;;;;13168:9;13147:12;13160:4;13147:18;;;;;;;;;;:30;;;;;;;;;;;;;10031:3178;10104:11;;;;;;;10031:3178;;;;13287:10;13300:1;13287:14;;13282:193;13311:15;13303:5;:23;13282:193;;;13374:12;13387:5;13374:19;;;;;;;;;;;13355:38;;;:8;13364:5;13355:15;;;;;;;;;;;;;;;;;;:38;;;;13351:114;;13431:12;13444:5;13431:19;;;;;;;;;;;13413:8;13422:5;13413:15;;;;;;;;;:37;;;;;;;;;;;;;;;;;;13351:114;13328:7;;;;;;;13282:193;;;;13484:19;;:::i;:::-;;;13674:10;13694:1;13687:4;:8;13674:21;;13669:2287;2139:2;13697:5;:19;13669:2287;;13763:1;13758;13746:9;:13;;;;;;:18;13742:2204;;;13830:8;13847:1;13839:5;:9;13830:19;;;;;;;;;;;;;;;;;;13818:31;;13880:9;13867:22;;14046:4;14040:11;14148:9;14141:5;14134:24;14224:10;14217:4;14210:5;14206:16;14199:36;14358:4;14350:6;14344:4;14337:5;14334:1;14330;14326:6;14315:48;14304:59;;14456:7;14469:1;14464:20;;;;14449:35;;14464:20;14473:9;14449:35;;13967:535;14660:2;14647:6;14654:1;14647:9;;;;;;;;;;;:15;;14627:36;;14779:1;14774;14762:9;:13;14761:19;;;;;;14749:31;;13742:2204;;;14933:9;14921:21;;2814:56;14973:4;;14960:17;;15134:4;15128:11;15236:9;15229:5;15222:24;15312:10;15305:4;15298:5;15294:16;15287:36;15446:4;15438:6;15432:4;15425:5;15422:1;15418;15414:6;15403:48;15392:59;;15544:7;15557:1;15552:20;;;;15537:35;;15552:20;15561:9;15537:35;;15055:535;15748:2;15735:6;15742:1;15735:9;;;;;;;;;;;:15;;15715:36;;15861:1;15849:9;:13;;;;;;15837:25;;13742:2204;13718:7;;;;;;;13669:2287;;;;15973:9;15966:16;;;;;15998:38;16008:9;;16019:10;16031:4;15998:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;15998:38:3;;;;;;;;;;;;;;;;;;;16137:14;16124:9;;:27;;;;;;;;;;;16254:4;16247:11;;;;;;;;;;;8700:7588;;;:::o;3345:515::-;3408:9;3436:1;3429:8;;3469:1;3464;3452:9;:13;;;;;;:18;3447:407;;;3487:9;3499:1;3487:13;;3514:9;3526:1;3514:13;;3541:9;3561:1;3553:4;:9;;3541:21;;3576:268;3591:1;3583:4;:9;3576:268;;;3650:1;3642:4;3634;3630:1;3618:9;:13;:20;3617:29;;;;;;:34;3612:218;;;3683:4;3676:11;;3612:218;;;3741:4;3734:11;;3782:1;3774:4;:9;;3767:16;;3805:6;;;;;;;3612:218;3576:268;;;3447:407;;;;3345:515;;;:::o;246:1673:1:-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;246:1673:1;;;;:::o;:::-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;246:1673:1;;;;:::o",
  "source": "/**\nContract to manage permissions to update the leaves of the imported MerkleTree contract (which is the base contract which handles tree inserts and updates).\n\n@Author iAmMichaelConnor\n*/\npragma solidity ^0.5.8;\n\nimport \"./MerkleTreeSHA.sol\";\n\ncontract MerkleTreeControllerSHA is MerkleTreeSHA {\n\n    address public owner; // We'll demonstrate simple 'permissioning' to update leaves by only allowing the owner to update leaves.\n\n    mapping(bytes32 => bytes32) public roots; // Example of a way to hold every root that's been calculated by this contract. This isn't actually used by this simple example-contract.\n\n    bytes32 public latestRoot; // Example of a way to hold the latest root so that users can retrieve it. This isn't actually used by this simple example-contract.\n\n    /**\n    We'll demonstrate simple 'permissioning' to update leaves by only allowing the owner to update leaves.\n    @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"You are not authorised to invoke this function\");\n        _;\n    }\n\n    /**\n    @notice Constructor for the MerkleTreeController contract.\n    */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n    @notice Append a leaf to the tree\n    @param leafValue - the value of the leaf being inserted.\n    */\n    function _insertLeaf(bytes32 leafValue) external onlyOwner {\n\n        bytes32 root = insertLeaf(leafValue); // recalculate the root of the tree\n\n        // roots[root] = root;\n\n        latestRoot = root;\n    }\n\n    /**\n    @notice Append leaves to the tree\n    @param leafValues - the values of the leaves being inserted.\n    */\n    function _insertLeaves(bytes32[] calldata leafValues) external onlyOwner {\n\n        bytes32 root = insertLeaves(leafValues); // recalculate the root of the tree\n\n        // roots[root] = root;\n\n        latestRoot = root;\n    }\n}\n",
  "sourcePath": "/Users/em137vl/Documents/git/timber/deployer/contracts/MerkleTreeControllerSHA.sol",
  "ast": {
    "absolutePath": "/Users/em137vl/Documents/git/timber/deployer/contracts/MerkleTreeControllerSHA.sol",
    "exportedSymbols": {
      "MerkleTreeControllerSHA": [
        143
      ]
    },
    "id": 144,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 73,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".8"
        ],
        "nodeType": "PragmaDirective",
        "src": "190:23:1"
      },
      {
        "absolutePath": "/Users/em137vl/Documents/git/timber/deployer/contracts/MerkleTreeSHA.sol",
        "file": "./MerkleTreeSHA.sol",
        "id": 74,
        "nodeType": "ImportDirective",
        "scope": 144,
        "sourceUnit": 1328,
        "src": "215:29:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 75,
              "name": "MerkleTreeSHA",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1327,
              "src": "282:13:1",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MerkleTreeSHA_$1327",
                "typeString": "contract MerkleTreeSHA"
              }
            },
            "id": 76,
            "nodeType": "InheritanceSpecifier",
            "src": "282:13:1"
          }
        ],
        "contractDependencies": [
          1327
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 143,
        "linearizedBaseContracts": [
          143,
          1327
        ],
        "name": "MerkleTreeControllerSHA",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 78,
            "name": "owner",
            "nodeType": "VariableDeclaration",
            "scope": 143,
            "src": "303:20:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 77,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "303:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 82,
            "name": "roots",
            "nodeType": "VariableDeclaration",
            "scope": 143,
            "src": "436:40:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_bytes32_$_t_bytes32_$",
              "typeString": "mapping(bytes32 => bytes32)"
            },
            "typeName": {
              "id": 81,
              "keyType": {
                "id": 79,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "444:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              },
              "nodeType": "Mapping",
              "src": "436:27:1",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_bytes32_$_t_bytes32_$",
                "typeString": "mapping(bytes32 => bytes32)"
              },
              "valueType": {
                "id": 80,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "455:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 84,
            "name": "latestRoot",
            "nodeType": "VariableDeclaration",
            "scope": 143,
            "src": "621:25:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 83,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "621:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 95,
              "nodeType": "Block",
              "src": "992:106:1",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 90,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 87,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1587,
                            "src": "1010:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 88,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1010:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 89,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 78,
                          "src": "1024:5:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1010:19:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "596f7520617265206e6f7420617574686f726973656420746f20696e766f6b6520746869732066756e6374696f6e",
                        "id": 91,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1031:48:1",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_6af07f385029d971e807b8a865d509915c5562585426c93e05f8579214aa193c",
                          "typeString": "literal_string \"You are not authorised to invoke this function\""
                        },
                        "value": "You are not authorised to invoke this function"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_6af07f385029d971e807b8a865d509915c5562585426c93e05f8579214aa193c",
                          "typeString": "literal_string \"You are not authorised to invoke this function\""
                        }
                      ],
                      "id": 86,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1590,
                        1591
                      ],
                      "referencedDeclaration": 1591,
                      "src": "1002:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 92,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1002:78:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 93,
                  "nodeType": "ExpressionStatement",
                  "src": "1002:78:1"
                },
                {
                  "id": 94,
                  "nodeType": "PlaceholderStatement",
                  "src": "1090:1:1"
                }
              ]
            },
            "documentation": "We'll demonstrate simple 'permissioning' to update leaves by only allowing the owner to update leaves.\n@dev Throws if called by any account other than the owner.",
            "id": 96,
            "name": "onlyOwner",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 85,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "989:2:1"
            },
            "src": "971:127:1",
            "visibility": "internal"
          },
          {
            "body": {
              "id": 104,
              "nodeType": "Block",
              "src": "1203:35:1",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 102,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 99,
                      "name": "owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 78,
                      "src": "1213:5:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 100,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1587,
                        "src": "1221:3:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 101,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "1221:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "1213:18:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 103,
                  "nodeType": "ExpressionStatement",
                  "src": "1213:18:1"
                }
              ]
            },
            "documentation": "@notice Constructor for the MerkleTreeController contract.",
            "id": 105,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 97,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1193:2:1"
            },
            "returnParameters": {
              "id": 98,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1203:0:1"
            },
            "scope": 143,
            "src": "1182:56:1",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 122,
              "nodeType": "Block",
              "src": "1417:150:1",
              "statements": [
                {
                  "assignments": [
                    113
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 113,
                      "name": "root",
                      "nodeType": "VariableDeclaration",
                      "scope": 122,
                      "src": "1428:12:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 112,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "1428:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 117,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 115,
                        "name": "leafValue",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 107,
                        "src": "1454:9:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 114,
                      "name": "insertLeaf",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 976,
                      "src": "1443:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$returns$_t_bytes32_$",
                        "typeString": "function (bytes32) returns (bytes32)"
                      }
                    },
                    "id": 116,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1443:21:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1428:36:1"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 120,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 118,
                      "name": "latestRoot",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 84,
                      "src": "1543:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 119,
                      "name": "root",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 113,
                      "src": "1556:4:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "1543:17:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 121,
                  "nodeType": "ExpressionStatement",
                  "src": "1543:17:1"
                }
              ]
            },
            "documentation": "@notice Append a leaf to the tree\n@param leafValue - the value of the leaf being inserted.",
            "id": 123,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 110,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 109,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 96,
                  "src": "1407:9:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1407:9:1"
              }
            ],
            "name": "_insertLeaf",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 108,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 107,
                  "name": "leafValue",
                  "nodeType": "VariableDeclaration",
                  "scope": 123,
                  "src": "1379:17:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 106,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1379:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1378:19:1"
            },
            "returnParameters": {
              "id": 111,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1417:0:1"
            },
            "scope": 143,
            "src": "1358:209:1",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 141,
              "nodeType": "Block",
              "src": "1764:153:1",
              "statements": [
                {
                  "assignments": [
                    132
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 132,
                      "name": "root",
                      "nodeType": "VariableDeclaration",
                      "scope": 141,
                      "src": "1775:12:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 131,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "1775:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 136,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 134,
                        "name": "leafValues",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 126,
                        "src": "1803:10:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                          "typeString": "bytes32[] calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                          "typeString": "bytes32[] calldata"
                        }
                      ],
                      "id": 133,
                      "name": "insertLeaves",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1326,
                      "src": "1790:12:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes32[] memory) returns (bytes32)"
                      }
                    },
                    "id": 135,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1790:24:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1775:39:1"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 139,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 137,
                      "name": "latestRoot",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 84,
                      "src": "1893:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 138,
                      "name": "root",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 132,
                      "src": "1906:4:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "1893:17:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 140,
                  "nodeType": "ExpressionStatement",
                  "src": "1893:17:1"
                }
              ]
            },
            "documentation": "@notice Append leaves to the tree\n@param leafValues - the values of the leaves being inserted.",
            "id": 142,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 129,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 128,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 96,
                  "src": "1754:9:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1754:9:1"
              }
            ],
            "name": "_insertLeaves",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 127,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 126,
                  "name": "leafValues",
                  "nodeType": "VariableDeclaration",
                  "scope": 142,
                  "src": "1714:29:1",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 124,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1714:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 125,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "1714:9:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1713:31:1"
            },
            "returnParameters": {
              "id": 130,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1764:0:1"
            },
            "scope": 143,
            "src": "1691:226:1",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 144,
        "src": "246:1673:1"
      }
    ],
    "src": "190:1730:1"
  },
  "legacyAST": {
    "absolutePath": "/Users/em137vl/Documents/git/timber/deployer/contracts/MerkleTreeControllerSHA.sol",
    "exportedSymbols": {
      "MerkleTreeControllerSHA": [
        143
      ]
    },
    "id": 144,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 73,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".8"
        ],
        "nodeType": "PragmaDirective",
        "src": "190:23:1"
      },
      {
        "absolutePath": "/Users/em137vl/Documents/git/timber/deployer/contracts/MerkleTreeSHA.sol",
        "file": "./MerkleTreeSHA.sol",
        "id": 74,
        "nodeType": "ImportDirective",
        "scope": 144,
        "sourceUnit": 1328,
        "src": "215:29:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 75,
              "name": "MerkleTreeSHA",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1327,
              "src": "282:13:1",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MerkleTreeSHA_$1327",
                "typeString": "contract MerkleTreeSHA"
              }
            },
            "id": 76,
            "nodeType": "InheritanceSpecifier",
            "src": "282:13:1"
          }
        ],
        "contractDependencies": [
          1327
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 143,
        "linearizedBaseContracts": [
          143,
          1327
        ],
        "name": "MerkleTreeControllerSHA",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 78,
            "name": "owner",
            "nodeType": "VariableDeclaration",
            "scope": 143,
            "src": "303:20:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 77,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "303:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 82,
            "name": "roots",
            "nodeType": "VariableDeclaration",
            "scope": 143,
            "src": "436:40:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_bytes32_$_t_bytes32_$",
              "typeString": "mapping(bytes32 => bytes32)"
            },
            "typeName": {
              "id": 81,
              "keyType": {
                "id": 79,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "444:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              },
              "nodeType": "Mapping",
              "src": "436:27:1",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_bytes32_$_t_bytes32_$",
                "typeString": "mapping(bytes32 => bytes32)"
              },
              "valueType": {
                "id": 80,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "455:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 84,
            "name": "latestRoot",
            "nodeType": "VariableDeclaration",
            "scope": 143,
            "src": "621:25:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 83,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "621:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 95,
              "nodeType": "Block",
              "src": "992:106:1",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 90,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 87,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1587,
                            "src": "1010:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 88,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1010:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 89,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 78,
                          "src": "1024:5:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1010:19:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "596f7520617265206e6f7420617574686f726973656420746f20696e766f6b6520746869732066756e6374696f6e",
                        "id": 91,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1031:48:1",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_6af07f385029d971e807b8a865d509915c5562585426c93e05f8579214aa193c",
                          "typeString": "literal_string \"You are not authorised to invoke this function\""
                        },
                        "value": "You are not authorised to invoke this function"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_6af07f385029d971e807b8a865d509915c5562585426c93e05f8579214aa193c",
                          "typeString": "literal_string \"You are not authorised to invoke this function\""
                        }
                      ],
                      "id": 86,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1590,
                        1591
                      ],
                      "referencedDeclaration": 1591,
                      "src": "1002:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 92,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1002:78:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 93,
                  "nodeType": "ExpressionStatement",
                  "src": "1002:78:1"
                },
                {
                  "id": 94,
                  "nodeType": "PlaceholderStatement",
                  "src": "1090:1:1"
                }
              ]
            },
            "documentation": "We'll demonstrate simple 'permissioning' to update leaves by only allowing the owner to update leaves.\n@dev Throws if called by any account other than the owner.",
            "id": 96,
            "name": "onlyOwner",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 85,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "989:2:1"
            },
            "src": "971:127:1",
            "visibility": "internal"
          },
          {
            "body": {
              "id": 104,
              "nodeType": "Block",
              "src": "1203:35:1",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 102,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 99,
                      "name": "owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 78,
                      "src": "1213:5:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 100,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1587,
                        "src": "1221:3:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 101,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "1221:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "1213:18:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 103,
                  "nodeType": "ExpressionStatement",
                  "src": "1213:18:1"
                }
              ]
            },
            "documentation": "@notice Constructor for the MerkleTreeController contract.",
            "id": 105,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 97,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1193:2:1"
            },
            "returnParameters": {
              "id": 98,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1203:0:1"
            },
            "scope": 143,
            "src": "1182:56:1",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 122,
              "nodeType": "Block",
              "src": "1417:150:1",
              "statements": [
                {
                  "assignments": [
                    113
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 113,
                      "name": "root",
                      "nodeType": "VariableDeclaration",
                      "scope": 122,
                      "src": "1428:12:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 112,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "1428:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 117,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 115,
                        "name": "leafValue",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 107,
                        "src": "1454:9:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 114,
                      "name": "insertLeaf",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 976,
                      "src": "1443:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$returns$_t_bytes32_$",
                        "typeString": "function (bytes32) returns (bytes32)"
                      }
                    },
                    "id": 116,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1443:21:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1428:36:1"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 120,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 118,
                      "name": "latestRoot",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 84,
                      "src": "1543:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 119,
                      "name": "root",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 113,
                      "src": "1556:4:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "1543:17:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 121,
                  "nodeType": "ExpressionStatement",
                  "src": "1543:17:1"
                }
              ]
            },
            "documentation": "@notice Append a leaf to the tree\n@param leafValue - the value of the leaf being inserted.",
            "id": 123,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 110,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 109,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 96,
                  "src": "1407:9:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1407:9:1"
              }
            ],
            "name": "_insertLeaf",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 108,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 107,
                  "name": "leafValue",
                  "nodeType": "VariableDeclaration",
                  "scope": 123,
                  "src": "1379:17:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 106,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1379:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1378:19:1"
            },
            "returnParameters": {
              "id": 111,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1417:0:1"
            },
            "scope": 143,
            "src": "1358:209:1",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 141,
              "nodeType": "Block",
              "src": "1764:153:1",
              "statements": [
                {
                  "assignments": [
                    132
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 132,
                      "name": "root",
                      "nodeType": "VariableDeclaration",
                      "scope": 141,
                      "src": "1775:12:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 131,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "1775:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 136,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 134,
                        "name": "leafValues",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 126,
                        "src": "1803:10:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                          "typeString": "bytes32[] calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                          "typeString": "bytes32[] calldata"
                        }
                      ],
                      "id": 133,
                      "name": "insertLeaves",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1326,
                      "src": "1790:12:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes32[] memory) returns (bytes32)"
                      }
                    },
                    "id": 135,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1790:24:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1775:39:1"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 139,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 137,
                      "name": "latestRoot",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 84,
                      "src": "1893:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 138,
                      "name": "root",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 132,
                      "src": "1906:4:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "1893:17:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 140,
                  "nodeType": "ExpressionStatement",
                  "src": "1893:17:1"
                }
              ]
            },
            "documentation": "@notice Append leaves to the tree\n@param leafValues - the values of the leaves being inserted.",
            "id": 142,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 129,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 128,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 96,
                  "src": "1754:9:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1754:9:1"
              }
            ],
            "name": "_insertLeaves",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 127,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 126,
                  "name": "leafValues",
                  "nodeType": "VariableDeclaration",
                  "scope": 142,
                  "src": "1714:29:1",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 124,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1714:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 125,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "1714:9:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1713:31:1"
            },
            "returnParameters": {
              "id": 130,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1764:0:1"
            },
            "scope": 143,
            "src": "1691:226:1",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 144,
        "src": "246:1673:1"
      }
    ],
    "src": "190:1730:1"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.8+commit.23d335f2.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.9",
  "updatedAt": "2020-04-26T15:32:02.590Z",
  "devdoc": {
    "methods": {
      "_insertLeaf(bytes32)": {
        "params": {
          "leafValue": "- the value of the leaf being inserted."
        }
      },
      "_insertLeaves(bytes32[])": {
        "params": {
          "leafValues": "- the values of the leaves being inserted."
        }
      },
      "insertLeaf(bytes32)": {
        "params": {
          "leafValue": "- the value of the leaf being inserted."
        },
        "return": "bytes32 - the root of the merkle tree, after the insert."
      },
      "insertLeaves(bytes32[])": {
        "params": {
          "leafValues": "- the values of the leaves being inserted."
        },
        "return": "bytes32[] - the root of the merkle tree, after all the inserts."
      }
    }
  },
  "userdoc": {
    "methods": {
      "_insertLeaf(bytes32)": {
        "notice": "Append a leaf to the tree"
      },
      "_insertLeaves(bytes32[])": {
        "notice": "Append leaves to the tree"
      },
      "constructor": "Constructor for the MerkleTreeController contract.",
      "insertLeaf(bytes32)": {
        "notice": "Insert a leaf into the Merkle Tree, update the root, and update any values in the (persistently stored) frontier."
      },
      "insertLeaves(bytes32[])": {
        "notice": "Insert multiple leaves into the Merkle Tree, and then update the root, and update any values in the (persistently stored) frontier."
      }
    }
  }
}